<?xml version="1.0" encoding="UTF-8"?> 
    <!--
        This_software_was_developed_and_/_or_modified_by_Raytheon_Company,
        pursuant_to_Contract_DG133W-05-CQ-1067_with_the_US_Government.
        
        U.S._EXPORT_CONTROLLED_TECHNICAL_DATA
        This_software_product_contains_export-restricted_data_whose
        export/transfer/disclosure_is_restricted_by_U.S._law._Dissemination
        to_non-U.S._persons_whether_in_the_United_States_or_abroad_requires
        an_export_license_or_other_authorization.
        
        Contractor_Name:________Raytheon_Company
        Contractor_Address:_____6825_Pine_Street,_Suite_340
        ________________________Mail_Stop_B8
        ________________________Omaha,_NE_68106
        ________________________402.291.0100
        
        See_the_AWIPS_II_Master_Rights_File_("Master_Rights_File.pdf")_for
        further_licensing_information.
    -->
    <!--
        This is an absolute override file, indicating that a higher priority
        version of the file will completely replace a lower priority version
        of the file.
    -->
<?xml-stylesheet type="text/css" href="plots.css"?>
<svg width="80" height="80" viewBox="0 0 80 80" overflow="visible"
    xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
    style="stroke: rgb(255,255,255);">
    <defs>
        <script type="text/python" plotDelegate="plotDelegate">
            <![CDATA[
                import time
                
                class PirepIcingDelegate(PlotDelegate):
                    def __init__(self):
                        PlotDelegate.__init__(self)
                
                    def getSampleText(self, rec):
                        # use obsText for pirep
                        if rec.isValidParameter("obsText"):
                            return rec.getString("obsText")
                        # rebuild text for airep
                        sampleString = "ARP "
                        sampleString += " "
                        sampleString += " F%d" % (rec.getInt("flightLevel")/100)
                        
                        try:
                            iceInten = rec.getString("iceInten")
                        except ValueError:
                            iceInten = ""
                        try:
                            iceType = rec.getString("iceType")
                        except ValueError:
                            icetype = ""
                        if iceInten != ""  or iceType != "":
                            sampleString += " IC"
                            if iceInten != "":
                                sampleString += " "
                                sampleString += iceInten
                            if iceType != "":
                                sampleString += " "
                                sampleString += iceType
                        return sampleString
                        
                    def isValid(self, rec):
                        # DCS10257
                        # need icing data
                        # only show non-severe / no severity
                        if rec.isValidParameter("iceInten"):
                            iceInten = rec.getString("iceInten")
                        else:
                            iceInten = ""
                        if rec.isValidParameter("iceType"):
                            iceType = rec.getString("iceType")
                        else:
                            iceType = ""
                        if (iceInten == "") and (iceType == ""):
                            # no icing data
                            return False
                        elif (iceInten == "SEV") or (iceInten == "EXTRM"):
                            # incorrect severity
                            return False
                        else:
                            # low or no severity, and has some icing data
                            return True
                
                plotDelegate = PirepIcingDelegate()
            ]]>
        </script>
        <style type="text/css">
            <![CDATA[
                @font-face { font-family: "WindSymbolFont";
                        src: url(WindSymbols.svg#WindSymbols); }
                @font-face { font-family: "WxSymbolFont";
                        src: url(WxSymbols.svg#WxSymbols); }
                @font-face { font-family: "SpecialSymbolFont";
                        src: url(SpecialSymbols.svg#SpecialSymbols); }
            ]]>
        </style>
        <symbol overflow="visible" id="plotData" class="info">
            <text id="sampleText" plotMode="sample" plotParam="obsText">
            </text>
            <text id="validityParams" plotMode="null" class="text"
                plotParam="iceType" x="0" y="0" visibility="hidden">0</text>
            <text id="iceInensity" plotMode="table" class="weather"
                plotLookupTable="icing_intens_trans.txt" plotParam="iceInten"
                x="0" y="0">0</text>
            <text id="fltLvlText" plotMode="text" plotParam="flightLevel"
                plotFormat="%3.0f" plotUnit="hft" style="text-anchor: end;"
                x="-15px" y="0px">75</text>
            <text id="iceType" plotMode="table" class="weather"
                plotLookupTable="icing_type_trans.txt" plotParam="iceType"
                style="text-anchor: end" x="0" y="-10">0</text>
        </symbol>
    </defs>
    <use id="wind" x="40" y="40" width="80" height="80" visibility="visible"
        xlink:href="#plotData" />
</svg>