package com.raytheon.uf.common.registry;

import java.util.List;

import com.raytheon.uf.common.serialization.annotations.DynamicSerialize;
import com.raytheon.uf.common.serialization.annotations.DynamicSerializeElement;

/**
 * An extension of RegistryResponse that includes a Query so that results can be
 * easily maintained with Queries that generated them.
 * 
 * <pre>
 * 
 * SOFTWARE HISTORY
 * 
 * Date         Ticket#    Engineer    Description
 * ------------ ---------- ----------- --------------------------
 * Mar 28, 2012            jspinks     Initial creation
 * Jun 21, 2012 736        djohnson    Add thrift serialization annotations.
 * Aug 02, 2012 955        djohnson    getRegistryObjects() is deprecated, add generic result retrieval.
 * Aug 20, 2012 0743       djohnson    Finish making registry type-safe.
 * 
 * </pre>
 * 
 * @author jspinks
 * @version 1.0
 */
@DynamicSerialize
public class RegistryQueryResponse<T> extends RegistryResponse<T> {
    
    @DynamicSerializeElement
    private RegistryQuery<T> query;

    /**
     * Default Constructor.
     */
    public RegistryQueryResponse() {
    }

    /**
     * Constructor accepting the query.
     */
    public RegistryQueryResponse(RegistryQuery<T> query) {
        setQuery(query);
    }

    /**
     * A getter for the query attribute.
     * 
     * @return The value of the query attribute.
     */
    public RegistryQuery<T> getQuery() {
        return query;
    } 

    
    /**
     * @param query
     *            the query to set
     */
    public void setQuery(RegistryQuery<T> query) {
        this.query = query;
    }

    /**
     * Retrieve the results from the response generated by the query.
     * 
     * @return the results
     */
    public List<T> getResults() {
        if (query == null) {
            throw new NullPointerException("query");
        }

        return query.getResults(this);
    }

    /**
     * Retrieve the single result from the response generated by the query.
     * 
     * @return the result
     */
    public T getSingleResult() {
        if (query == null) {
            throw new NullPointerException("query");
        }
        return query.getSingleResult(this);
    }
}
