/**
* This software was developed and / or modified by Raytheon Company,
* pursuant to Contract DG133W-05-CQ-1067 with the US Government.
* 
* U.S. EXPORT CONTROLLED TECHNICAL DATA
* This software product contains export-restricted data whose
* export/transfer/disclosure is restricted by U.S. law. Dissemination
* to non-U.S. persons whether in the United States or abroad requires
* an export license or other authorization.
* 
* Contractor Name:        Raytheon Company
* Contractor Address:     6825 Pine Street, Suite 340
*                         Mail Stop B8
*                         Omaha, NE 68106
*                         402.291.0100
* 
* See the AWIPS II Master Rights File ("Master Rights File.pdf") for
* further licensing information.
**/
package com.raytheon.uf.common.dataplugin.shef.tables;
// default package

// Generated Oct 17, 2008 2:22:17 PM by Hibernate Tools 3.2.2.GA

import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import com.raytheon.uf.common.serialization.annotations.DynamicSerialize;
import com.raytheon.uf.common.serialization.annotations.DynamicSerializeElement;

/**
 * Dpaadapt generated by hbm2java
 * 
 * 
 * <pre>
 * 
 * SOFTWARE HISTORY
 * Date         Ticket#    Engineer    Description
 * ------------ ---------- ----------- --------------------------
 * Oct 17, 2008                        Initial generation by hbm2java
 * Aug 19, 2011 10672      jkorman     Move refactor to new project
 * Oct 07, 2013  2361      njensen     Removed XML annotations
 * Sep 13, 2016  4622      jschmid     Added toString() method
 * Nov 02, 2016  4622      skorolev    Cleanup.
 * 
 * </pre>
 * 
 * @author jkorman
 */
@Entity
@Table(name = "dpaadapt")
@DynamicSerialize
public class Dpaadapt implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    @DynamicSerializeElement
    private DpaadaptId id;

    @DynamicSerializeElement
    private Radarloc radarloc;

    @DynamicSerializeElement
    private Float minReflth;

    @DynamicSerializeElement
    private Float maxReflth;

    @DynamicSerializeElement
    private Float refTltest;

    @DynamicSerializeElement
    private Float rngTltin;

    @DynamicSerializeElement
    private Float rngTltout;

    @DynamicSerializeElement
    private Float maxBirng;

    @DynamicSerializeElement
    private Float minBirng;

    @DynamicSerializeElement
    private Float minEchoar;

    @DynamicSerializeElement
    private Float minAwrefl;

    @DynamicSerializeElement
    private Float maxPctred;

    @DynamicSerializeElement
    private Float mltZrcoef;

    @DynamicSerializeElement
    private Float pwrZrcoef;

    @DynamicSerializeElement
    private Float minZrefl;

    @DynamicSerializeElement
    private Float maxZrefl;

    @DynamicSerializeElement
    private Float beamWidth;

    @DynamicSerializeElement
    private Float blockageThresh;

    @DynamicSerializeElement
    private Float clutterThresh;

    @DynamicSerializeElement
    private Float weightThresh;

    @DynamicSerializeElement
    private Float hybridScanThresh;

    @DynamicSerializeElement
    private Float lowReflectThresh;

    @DynamicSerializeElement
    private Float detectReflectThr;

    @DynamicSerializeElement
    private Float detectAreaThresh;

    @DynamicSerializeElement
    private Float detectTimeThresh;

    @DynamicSerializeElement
    private Float exclusionZones;

    @DynamicSerializeElement
    private Float maxStmspd;

    @DynamicSerializeElement
    private Float maxTimdif;

    @DynamicSerializeElement
    private Float minArtcon;

    @DynamicSerializeElement
    private Float timP1cont;

    @DynamicSerializeElement
    private Float timP2cont;

    @DynamicSerializeElement
    private Float maxEcarch;

    @DynamicSerializeElement
    private Float rngCutoff;

    @DynamicSerializeElement
    private Float rngE1coef;

    @DynamicSerializeElement
    private Float rngE2coef;

    @DynamicSerializeElement
    private Float rngE3coef;

    @DynamicSerializeElement
    private Float minPrate;

    @DynamicSerializeElement
    private Float maxPrate;

    @DynamicSerializeElement
    private Float timRestrt;

    @DynamicSerializeElement
    private Float maxTimint;

    @DynamicSerializeElement
    private Float minTimprd;

    @DynamicSerializeElement
    private Float thrHlyout;

    @DynamicSerializeElement
    private Float endTimgag;

    @DynamicSerializeElement
    private Float maxPrdval;

    @DynamicSerializeElement
    private Float maxHlyval;

    @DynamicSerializeElement
    private Float timBiest;

    @DynamicSerializeElement
    private Float thrNosets;

    @DynamicSerializeElement
    private Float resBias;

    @DynamicSerializeElement
    private Float longestLag;

    @DynamicSerializeElement
    private String biasApplied;

    public Dpaadapt() {
    }

    public Dpaadapt(DpaadaptId id, Radarloc radarloc) {
        this.id = id;
        this.radarloc = radarloc;
    }

    public Dpaadapt(DpaadaptId id, Radarloc radarloc, Float minReflth,
            Float maxReflth, Float refTltest, Float rngTltin, Float rngTltout,
            Float maxBirng, Float minBirng, Float minEchoar, Float minAwrefl,
            Float maxPctred, Float mltZrcoef, Float pwrZrcoef, Float minZrefl,
            Float maxZrefl, Float beamWidth, Float blockageThresh,
            Float clutterThresh, Float weightThresh, Float hybridScanThresh,
            Float lowReflectThresh, Float detectReflectThr,
            Float detectAreaThresh, Float detectTimeThresh,
            Float exclusionZones, Float maxStmspd, Float maxTimdif,
            Float minArtcon, Float timP1cont, Float timP2cont, Float maxEcarch,
            Float rngCutoff, Float rngE1coef, Float rngE2coef, Float rngE3coef,
            Float minPrate, Float maxPrate, Float timRestrt, Float maxTimint,
            Float minTimprd, Float thrHlyout, Float endTimgag, Float maxPrdval,
            Float maxHlyval, Float timBiest, Float thrNosets, Float resBias,
            Float longestLag, String biasApplied) {
        this.id = id;
        this.radarloc = radarloc;
        this.minReflth = minReflth;
        this.maxReflth = maxReflth;
        this.refTltest = refTltest;
        this.rngTltin = rngTltin;
        this.rngTltout = rngTltout;
        this.maxBirng = maxBirng;
        this.minBirng = minBirng;
        this.minEchoar = minEchoar;
        this.minAwrefl = minAwrefl;
        this.maxPctred = maxPctred;
        this.mltZrcoef = mltZrcoef;
        this.pwrZrcoef = pwrZrcoef;
        this.minZrefl = minZrefl;
        this.maxZrefl = maxZrefl;
        this.beamWidth = beamWidth;
        this.blockageThresh = blockageThresh;
        this.clutterThresh = clutterThresh;
        this.weightThresh = weightThresh;
        this.hybridScanThresh = hybridScanThresh;
        this.lowReflectThresh = lowReflectThresh;
        this.detectReflectThr = detectReflectThr;
        this.detectAreaThresh = detectAreaThresh;
        this.detectTimeThresh = detectTimeThresh;
        this.exclusionZones = exclusionZones;
        this.maxStmspd = maxStmspd;
        this.maxTimdif = maxTimdif;
        this.minArtcon = minArtcon;
        this.timP1cont = timP1cont;
        this.timP2cont = timP2cont;
        this.maxEcarch = maxEcarch;
        this.rngCutoff = rngCutoff;
        this.rngE1coef = rngE1coef;
        this.rngE2coef = rngE2coef;
        this.rngE3coef = rngE3coef;
        this.minPrate = minPrate;
        this.maxPrate = maxPrate;
        this.timRestrt = timRestrt;
        this.maxTimint = maxTimint;
        this.minTimprd = minTimprd;
        this.thrHlyout = thrHlyout;
        this.endTimgag = endTimgag;
        this.maxPrdval = maxPrdval;
        this.maxHlyval = maxHlyval;
        this.timBiest = timBiest;
        this.thrNosets = thrNosets;
        this.resBias = resBias;
        this.longestLag = longestLag;
        this.biasApplied = biasApplied;
    }

    @EmbeddedId
    @AttributeOverrides({
            @AttributeOverride(name = "radid", column = @Column(name = "radid", nullable = false, length = 3) ),
            @AttributeOverride(name = "obstime", column = @Column(name = "obstime", nullable = false, length = 29) ) })
    public DpaadaptId getId() {
        return this.id;
    }

    public void setId(DpaadaptId id) {
        this.id = id;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "radid", nullable = false, insertable = false, updatable = false)
    public Radarloc getRadarloc() {
        return this.radarloc;
    }

    public void setRadarloc(Radarloc radarloc) {
        this.radarloc = radarloc;
    }

    @Column(name = "min_reflth", precision = 8, scale = 8)
    public Float getMinReflth() {
        return this.minReflth;
    }

    public void setMinReflth(Float minReflth) {
        this.minReflth = minReflth;
    }

    @Column(name = "max_reflth", precision = 8, scale = 8)
    public Float getMaxReflth() {
        return this.maxReflth;
    }

    public void setMaxReflth(Float maxReflth) {
        this.maxReflth = maxReflth;
    }

    @Column(name = "ref_tltest", precision = 8, scale = 8)
    public Float getRefTltest() {
        return this.refTltest;
    }

    public void setRefTltest(Float refTltest) {
        this.refTltest = refTltest;
    }

    @Column(name = "rng_tltin", precision = 8, scale = 8)
    public Float getRngTltin() {
        return this.rngTltin;
    }

    public void setRngTltin(Float rngTltin) {
        this.rngTltin = rngTltin;
    }

    @Column(name = "rng_tltout", precision = 8, scale = 8)
    public Float getRngTltout() {
        return this.rngTltout;
    }

    public void setRngTltout(Float rngTltout) {
        this.rngTltout = rngTltout;
    }

    @Column(name = "max_birng", precision = 8, scale = 8)
    public Float getMaxBirng() {
        return this.maxBirng;
    }

    public void setMaxBirng(Float maxBirng) {
        this.maxBirng = maxBirng;
    }

    @Column(name = "min_birng", precision = 8, scale = 8)
    public Float getMinBirng() {
        return this.minBirng;
    }

    public void setMinBirng(Float minBirng) {
        this.minBirng = minBirng;
    }

    @Column(name = "min_echoar", precision = 8, scale = 8)
    public Float getMinEchoar() {
        return this.minEchoar;
    }

    public void setMinEchoar(Float minEchoar) {
        this.minEchoar = minEchoar;
    }

    @Column(name = "min_awrefl", precision = 8, scale = 8)
    public Float getMinAwrefl() {
        return this.minAwrefl;
    }

    public void setMinAwrefl(Float minAwrefl) {
        this.minAwrefl = minAwrefl;
    }

    @Column(name = "max_pctred", precision = 8, scale = 8)
    public Float getMaxPctred() {
        return this.maxPctred;
    }

    public void setMaxPctred(Float maxPctred) {
        this.maxPctred = maxPctred;
    }

    @Column(name = "mlt_zrcoef", precision = 8, scale = 8)
    public Float getMltZrcoef() {
        return this.mltZrcoef;
    }

    public void setMltZrcoef(Float mltZrcoef) {
        this.mltZrcoef = mltZrcoef;
    }

    @Column(name = "pwr_zrcoef", precision = 8, scale = 8)
    public Float getPwrZrcoef() {
        return this.pwrZrcoef;
    }

    public void setPwrZrcoef(Float pwrZrcoef) {
        this.pwrZrcoef = pwrZrcoef;
    }

    @Column(name = "min_zrefl", precision = 8, scale = 8)
    public Float getMinZrefl() {
        return this.minZrefl;
    }

    public void setMinZrefl(Float minZrefl) {
        this.minZrefl = minZrefl;
    }

    @Column(name = "max_zrefl", precision = 8, scale = 8)
    public Float getMaxZrefl() {
        return this.maxZrefl;
    }

    public void setMaxZrefl(Float maxZrefl) {
        this.maxZrefl = maxZrefl;
    }

    @Column(name = "beam_width", precision = 8, scale = 8)
    public Float getBeamWidth() {
        return this.beamWidth;
    }

    public void setBeamWidth(Float beamWidth) {
        this.beamWidth = beamWidth;
    }

    @Column(name = "blockage_thresh", precision = 8, scale = 8)
    public Float getBlockageThresh() {
        return this.blockageThresh;
    }

    public void setBlockageThresh(Float blockageThresh) {
        this.blockageThresh = blockageThresh;
    }

    @Column(name = "clutter_thresh", precision = 8, scale = 8)
    public Float getClutterThresh() {
        return this.clutterThresh;
    }

    public void setClutterThresh(Float clutterThresh) {
        this.clutterThresh = clutterThresh;
    }

    @Column(name = "weight_thresh", precision = 8, scale = 8)
    public Float getWeightThresh() {
        return this.weightThresh;
    }

    public void setWeightThresh(Float weightThresh) {
        this.weightThresh = weightThresh;
    }

    @Column(name = "hybrid_scan_thresh", precision = 8, scale = 8)
    public Float getHybridScanThresh() {
        return this.hybridScanThresh;
    }

    public void setHybridScanThresh(Float hybridScanThresh) {
        this.hybridScanThresh = hybridScanThresh;
    }

    @Column(name = "low_reflect_thresh", precision = 8, scale = 8)
    public Float getLowReflectThresh() {
        return this.lowReflectThresh;
    }

    public void setLowReflectThresh(Float lowReflectThresh) {
        this.lowReflectThresh = lowReflectThresh;
    }

    @Column(name = "detect_reflect_thr", precision = 8, scale = 8)
    public Float getDetectReflectThr() {
        return this.detectReflectThr;
    }

    public void setDetectReflectThr(Float detectReflectThr) {
        this.detectReflectThr = detectReflectThr;
    }

    @Column(name = "detect_area_thresh", precision = 8, scale = 8)
    public Float getDetectAreaThresh() {
        return this.detectAreaThresh;
    }

    public void setDetectAreaThresh(Float detectAreaThresh) {
        this.detectAreaThresh = detectAreaThresh;
    }

    @Column(name = "detect_time_thresh", precision = 8, scale = 8)
    public Float getDetectTimeThresh() {
        return this.detectTimeThresh;
    }

    public void setDetectTimeThresh(Float detectTimeThresh) {
        this.detectTimeThresh = detectTimeThresh;
    }

    @Column(name = "exclusion_zones", precision = 8, scale = 8)
    public Float getExclusionZones() {
        return this.exclusionZones;
    }

    public void setExclusionZones(Float exclusionZones) {
        this.exclusionZones = exclusionZones;
    }

    @Column(name = "max_stmspd", precision = 8, scale = 8)
    public Float getMaxStmspd() {
        return this.maxStmspd;
    }

    public void setMaxStmspd(Float maxStmspd) {
        this.maxStmspd = maxStmspd;
    }

    @Column(name = "max_timdif", precision = 8, scale = 8)
    public Float getMaxTimdif() {
        return this.maxTimdif;
    }

    public void setMaxTimdif(Float maxTimdif) {
        this.maxTimdif = maxTimdif;
    }

    @Column(name = "min_artcon", precision = 8, scale = 8)
    public Float getMinArtcon() {
        return this.minArtcon;
    }

    public void setMinArtcon(Float minArtcon) {
        this.minArtcon = minArtcon;
    }

    @Column(name = "tim_p1cont", precision = 8, scale = 8)
    public Float getTimP1cont() {
        return this.timP1cont;
    }

    public void setTimP1cont(Float timP1cont) {
        this.timP1cont = timP1cont;
    }

    @Column(name = "tim_p2cont", precision = 8, scale = 8)
    public Float getTimP2cont() {
        return this.timP2cont;
    }

    public void setTimP2cont(Float timP2cont) {
        this.timP2cont = timP2cont;
    }

    @Column(name = "max_ecarch", precision = 8, scale = 8)
    public Float getMaxEcarch() {
        return this.maxEcarch;
    }

    public void setMaxEcarch(Float maxEcarch) {
        this.maxEcarch = maxEcarch;
    }

    @Column(name = "rng_cutoff", precision = 8, scale = 8)
    public Float getRngCutoff() {
        return this.rngCutoff;
    }

    public void setRngCutoff(Float rngCutoff) {
        this.rngCutoff = rngCutoff;
    }

    @Column(name = "rng_e1coef", precision = 8, scale = 8)
    public Float getRngE1coef() {
        return this.rngE1coef;
    }

    public void setRngE1coef(Float rngE1coef) {
        this.rngE1coef = rngE1coef;
    }

    @Column(name = "rng_e2coef", precision = 8, scale = 8)
    public Float getRngE2coef() {
        return this.rngE2coef;
    }

    public void setRngE2coef(Float rngE2coef) {
        this.rngE2coef = rngE2coef;
    }

    @Column(name = "rng_e3coef", precision = 8, scale = 8)
    public Float getRngE3coef() {
        return this.rngE3coef;
    }

    public void setRngE3coef(Float rngE3coef) {
        this.rngE3coef = rngE3coef;
    }

    @Column(name = "min_prate", precision = 8, scale = 8)
    public Float getMinPrate() {
        return this.minPrate;
    }

    public void setMinPrate(Float minPrate) {
        this.minPrate = minPrate;
    }

    @Column(name = "max_prate", precision = 8, scale = 8)
    public Float getMaxPrate() {
        return this.maxPrate;
    }

    public void setMaxPrate(Float maxPrate) {
        this.maxPrate = maxPrate;
    }

    @Column(name = "tim_restrt", precision = 8, scale = 8)
    public Float getTimRestrt() {
        return this.timRestrt;
    }

    public void setTimRestrt(Float timRestrt) {
        this.timRestrt = timRestrt;
    }

    @Column(name = "max_timint", precision = 8, scale = 8)
    public Float getMaxTimint() {
        return this.maxTimint;
    }

    public void setMaxTimint(Float maxTimint) {
        this.maxTimint = maxTimint;
    }

    @Column(name = "min_timprd", precision = 8, scale = 8)
    public Float getMinTimprd() {
        return this.minTimprd;
    }

    public void setMinTimprd(Float minTimprd) {
        this.minTimprd = minTimprd;
    }

    @Column(name = "thr_hlyout", precision = 8, scale = 8)
    public Float getThrHlyout() {
        return this.thrHlyout;
    }

    public void setThrHlyout(Float thrHlyout) {
        this.thrHlyout = thrHlyout;
    }

    @Column(name = "end_timgag", precision = 8, scale = 8)
    public Float getEndTimgag() {
        return this.endTimgag;
    }

    public void setEndTimgag(Float endTimgag) {
        this.endTimgag = endTimgag;
    }

    @Column(name = "max_prdval", precision = 8, scale = 8)
    public Float getMaxPrdval() {
        return this.maxPrdval;
    }

    public void setMaxPrdval(Float maxPrdval) {
        this.maxPrdval = maxPrdval;
    }

    @Column(name = "max_hlyval", precision = 8, scale = 8)
    public Float getMaxHlyval() {
        return this.maxHlyval;
    }

    public void setMaxHlyval(Float maxHlyval) {
        this.maxHlyval = maxHlyval;
    }

    @Column(name = "tim_biest", precision = 8, scale = 8)
    public Float getTimBiest() {
        return this.timBiest;
    }

    public void setTimBiest(Float timBiest) {
        this.timBiest = timBiest;
    }

    @Column(name = "thr_nosets", precision = 8, scale = 8)
    public Float getThrNosets() {
        return this.thrNosets;
    }

    public void setThrNosets(Float thrNosets) {
        this.thrNosets = thrNosets;
    }

    @Column(name = "res_bias", precision = 8, scale = 8)
    public Float getResBias() {
        return this.resBias;
    }

    public void setResBias(Float resBias) {
        this.resBias = resBias;
    }

    @Column(name = "longest_lag", precision = 8, scale = 8)
    public Float getLongestLag() {
        return this.longestLag;
    }

    public void setLongestLag(Float longestLag) {
        this.longestLag = longestLag;
    }

    @Column(name = "bias_applied", length = 1)
    public String getBiasApplied() {
        return this.biasApplied;
    }

    public void setBiasApplied(String biasApplied) {
        this.biasApplied = biasApplied;
    }

    public String toString() {
        StringBuilder record = new StringBuilder();
        record.append("\nDpaadapt: \n{\nid: ").append(id);
        record.append("\nminReflth: ").append(minReflth);
        record.append(", maxReflth: ").append(maxReflth);
        record.append(", refTltest: ").append(refTltest);
        record.append(", rngTltin: ").append(rngTltin);
        record.append("\nrngTltout: ").append(rngTltout);
        record.append(", maxBirng: ").append(maxBirng);
        record.append(", minBirng: ").append(minBirng);
        record.append(", minEchoar: ").append(minEchoar);
        record.append("\nminAwrefl: ").append(minAwrefl);
        record.append(", nmaxPctred: ").append(maxPctred);
        record.append(", mltZrcoef: ").append(mltZrcoef);
        record.append(", pwrZrcoef: ").append(pwrZrcoef);
        record.append("\nminZrefl: ").append(minZrefl);
        record.append(", maxZrefl: ").append(maxZrefl);
        record.append(", beamWidth: ").append(beamWidth);
        record.append(", blockageThresh: ").append(blockageThresh);
        record.append("\nclutterThresh: ").append(clutterThresh);
        record.append(", weightThresh: ").append(weightThresh);
        record.append(", hybridScanThresh: ").append(hybridScanThresh);
        record.append("\nlowReflectThresh: ").append(lowReflectThresh);
        record.append(", detectReflectThr: ").append(detectReflectThr);
        record.append(", detectAreaThresh: ").append(detectAreaThresh);
        record.append("\ndetectTimeThresh: ").append(detectTimeThresh);
        record.append(", exclusionZones: ").append(exclusionZones);
        record.append("\nmaxStmspd: ").append(maxStmspd);
        record.append(", maxTimdif: ").append(maxTimdif);
        record.append(", minArtcon: ").append(minArtcon);
        record.append(", timP1cont: ").append(timP1cont);
        record.append("\ntimP2cont: ").append(timP2cont);
        record.append(", maxEcarch: ").append(maxEcarch);
        record.append(", rngCutoff: ").append(rngCutoff);
        record.append(", rngE1coef: ").append(rngE1coef);
        record.append("\nrngE2coef: ").append(rngE2coef);
        record.append(", rngE3coef: ").append(rngE3coef);
        record.append(", minPrate: ").append(minPrate);
        record.append(", maxPrate: ").append(maxPrate);
        record.append("\ntimRestrt: ").append(timRestrt);
        record.append(", maxTimint: ").append(maxTimint);
        record.append(", minTimprd: ").append(minTimprd);
        record.append(", thrHlyout: ").append(thrHlyout);
        record.append("\nendTimgag: ").append(endTimgag);
        record.append(", maxPrdval: ").append(maxPrdval);
        record.append(", maxHlyval: ").append(maxHlyval);
        record.append(", timBiest: ").append(timBiest);
        record.append("\nthrNosets: ").append(thrNosets);
        record.append(", resBias: ").append(resBias);
        record.append(", longestLag: ").append(longestLag);
        record.append(", biasApplied: ").append(biasApplied).append("\n}");
        return record.toString();
    }
}
