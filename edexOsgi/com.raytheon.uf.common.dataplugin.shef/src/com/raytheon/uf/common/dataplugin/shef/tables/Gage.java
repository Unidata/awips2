/**
* This software was developed and / or modified by Raytheon Company,
* pursuant to Contract DG133W-05-CQ-1067 with the US Government.
* 
* U.S. EXPORT CONTROLLED TECHNICAL DATA
* This software product contains export-restricted data whose
* export/transfer/disclosure is restricted by U.S. law. Dissemination
* to non-U.S. persons whether in the United States or abroad requires
* an export license or other authorization.
* 
* Contractor Name:        Raytheon Company
* Contractor Address:     6825 Pine Street, Suite 340
*                         Mail Stop B8
*                         Omaha, NE 68106
*                         402.291.0100
* 
* See the AWIPS II Master Rights File ("Master Rights File.pdf") for
* further licensing information.
**/
package com.raytheon.uf.common.dataplugin.shef.tables;
// default package
// Generated Oct 17, 2008 2:22:17 PM by Hibernate Tools 3.2.2.GA

import java.util.Date;
import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Gage generated by hbm2java
 * 
 * 
 * <pre>
 * 
 * SOFTWARE HISTORY
 * Date         Ticket#    Engineer    Description
 * ------------ ---------- ----------- --------------------------
 * Oct 17, 2008                        Initial generation by hbm2java
 * Aug 19, 2011      10672     jkorman Move refactor to new project
 * Oct 07, 2013       2361     njensen Removed XML annotations
 * 
 * </pre>
 * 
 * @author jkorman
 * @version 1.1
 */
@Entity
@Table(name = "gage")
@com.raytheon.uf.common.serialization.annotations.DynamicSerialize
public class Gage extends com.raytheon.uf.common.dataplugin.persist.PersistableDataObject implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    @com.raytheon.uf.common.serialization.annotations.DynamicSerializeElement
    private GageId id;

    @com.raytheon.uf.common.serialization.annotations.DynamicSerializeElement
    private Gagemaint gagemaint;

    @com.raytheon.uf.common.serialization.annotations.DynamicSerializeElement
    private Gagetype gagetype;

    @com.raytheon.uf.common.serialization.annotations.DynamicSerializeElement
    private Location location;

    @com.raytheon.uf.common.serialization.annotations.DynamicSerializeElement
    private Gageowner gageowner;

    @com.raytheon.uf.common.serialization.annotations.DynamicSerializeElement
    private Date gend;

    @com.raytheon.uf.common.serialization.annotations.DynamicSerializeElement
    private String remark;

    public Gage() {
    }

    public Gage(GageId id, Gagetype gagetype, Location location) {
        this.id = id;
        this.gagetype = gagetype;
        this.location = location;
    }

    public Gage(GageId id, Gagemaint gagemaint, Gagetype gagetype,
            Location location, Gageowner gageowner, Date gend, String remark) {
        this.id = id;
        this.gagemaint = gagemaint;
        this.gagetype = gagetype;
        this.location = location;
        this.gageowner = gageowner;
        this.gend = gend;
        this.remark = remark;
    }

    @EmbeddedId
    @AttributeOverrides( {
            @AttributeOverride(name = "lid", column = @Column(name = "lid", nullable = false, length = 8)),
            @AttributeOverride(name = "gbegin", column = @Column(name = "gbegin", nullable = false, length = 13)),
            @AttributeOverride(name = "type", column = @Column(name = "type", nullable = false, length = 10)) })
    public GageId getId() {
        return this.id;
    }

    public void setId(GageId id) {
        this.id = id;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "maint")
    public Gagemaint getGagemaint() {
        return this.gagemaint;
    }

    public void setGagemaint(Gagemaint gagemaint) {
        this.gagemaint = gagemaint;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "type", nullable = false, insertable = false, updatable = false)
    public Gagetype getGagetype() {
        return this.gagetype;
    }

    public void setGagetype(Gagetype gagetype) {
        this.gagetype = gagetype;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "lid", nullable = false, insertable = false, updatable = false)
    public Location getLocation() {
        return this.location;
    }

    public void setLocation(Location location) {
        this.location = location;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "owner")
    public Gageowner getGageowner() {
        return this.gageowner;
    }

    public void setGageowner(Gageowner gageowner) {
        this.gageowner = gageowner;
    }

    @Temporal(TemporalType.DATE)
    @Column(name = "gend", length = 13)
    public Date getGend() {
        return this.gend;
    }

    public void setGend(Date gend) {
        this.gend = gend;
    }

    @Column(name = "remark")
    public String getRemark() {
        return this.remark;
    }

    public void setRemark(String remark) {
        this.remark = remark;
    }

}
