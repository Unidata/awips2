/**
 * This software was developed and / or modified by Raytheon Company,
 * pursuant to Contract DG133W-05-CQ-1067 with the US Government.
 *
 * U.S. EXPORT CONTROLLED TECHNICAL DATA
 * This software product contains export-restricted data whose
 * export/transfer/disclosure is restricted by U.S. law. Dissemination
 * to non-U.S. persons whether in the United States or abroad requires
 * an export license or other authorization.
 *
 * Contractor Name:        Raytheon Company
 * Contractor Address:     6825 Pine Street, Suite 340
 *                         Mail Stop B8
 *                         Omaha, NE 68106
 *                         402.291.0100
 *
 * See the AWIPS II Master Rights File ("Master Rights File.pdf") for
 * further licensing information.
 **/
package com.raytheon.uf.common.dataplugin.shef.tables;

// default package
// Generated Oct 17, 2008 2:22:17 PM by Hibernate Tools 3.2.2.GA

import java.util.Date;

import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import com.raytheon.uf.common.serialization.annotations.DynamicSerialize;
import com.raytheon.uf.common.serialization.annotations.DynamicSerializeElement;

/**
 * Dparadar generated by hbm2java
 *
 *
 * <pre>
 *
 * SOFTWARE HISTORY
 * Date         Ticket#   Engineer    Description
 * ------------ ---------- ----------- --------------------------
 * Oct 17, 2008                        Initial generation by hbm2java
 * Aug 19, 2011 10672     jkorman      Move refactor to new project
 * Oct 07, 2013  2361     njensen      Removed XML annotations
 * Jul 21, 2016  4622     jschmid      Added {@link #SELECT_OBSTIME_FROM_DPARADARID, @link #COUNT_IN_DPARADAR}.
 * Sep 13, 2016  4622     jschmid      Added toString() method
 * Nov 02, 2016  4622     skorolev     Cleanup.
 * Apr 04, 2019  6140     tgurney      Removed COUNT_IN_DPARADAR query
 *
 * </pre>
 *
 * @author jkorman
 */

@NamedQueries({
        @NamedQuery(name = Dparadar.SELECT_MAX_OBSTIME_FROM_DPARADARID, query = Dparadar.SELECT_MAX_OBSTIME_FROM_DPARADARID_HQL),
        @NamedQuery(name = Dparadar.SELECT_MIN_OBSTIME_FROM_DPARADARID, query = Dparadar.SELECT_MIN_OBSTIME_FROM_DPARADARID_HQL) })
@Entity
@Table(name = "dparadar")
@DynamicSerialize
public class Dparadar implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    public static final String SELECT_MAX_OBSTIME_FROM_DPARADARID = "SELECT_MAX_OBSTIME_FROM_DPARADARID";

    protected static final String SELECT_MAX_OBSTIME_FROM_DPARADARID_HQL = "SELECT max(rec.id.obstime) FROM Dparadar rec WHERE "
            + "rec.id.radid = :radarId AND rec.id.obstime >= :lowerTimeBound AND rec.id.obstime <= :topOfHourMark";

    public static final String SELECT_MIN_OBSTIME_FROM_DPARADARID = "SELECT_MIN_OBSTIME_FROM_DPARADARID";

    protected static final String SELECT_MIN_OBSTIME_FROM_DPARADARID_HQL = "SELECT min(rec.id.obstime) FROM Dparadar rec WHERE "
            + "rec.id.radid = :radarId AND rec.id.obstime >= :topOfHourMark AND rec.id.obstime <= :upperTimeBound";

    @DynamicSerializeElement
    private DparadarId id;

    @DynamicSerializeElement
    private Radarloc radarloc;

    @DynamicSerializeElement
    private Short minoff;

    @DynamicSerializeElement
    private Float maxvalh;

    @DynamicSerializeElement
    private Float maxvald;

    @DynamicSerializeElement
    private Float s1BiasValue;

    @DynamicSerializeElement
    private Date producttime;

    @DynamicSerializeElement
    private Short nisolbin;

    @DynamicSerializeElement
    private Short noutint;

    @DynamicSerializeElement
    private Short noutrep;

    @DynamicSerializeElement
    private Float areared;

    @DynamicSerializeElement
    private Float biscanr;

    @DynamicSerializeElement
    private Integer blockBinsReject;

    @DynamicSerializeElement
    private Integer clutterBinsRej;

    @DynamicSerializeElement
    private Integer binsSmoothed;

    @DynamicSerializeElement
    private Float scanBinsFilled;

    @DynamicSerializeElement
    private Float highElevAngle;

    @DynamicSerializeElement
    private Float scanRainArea;

    @DynamicSerializeElement
    private Short nbadscan;

    @DynamicSerializeElement
    private Short nhourout;

    @DynamicSerializeElement
    private Short volcovpat;

    @DynamicSerializeElement
    private Short opermode;

    @DynamicSerializeElement
    private String missper;

    @DynamicSerializeElement
    private Short supplmess;

    @DynamicSerializeElement
    private String gridFilename;

    public Dparadar() {
    }

    public Dparadar(DparadarId id, Radarloc radarloc) {
        this.id = id;
        this.radarloc = radarloc;
    }

    public Dparadar(DparadarId id, Radarloc radarloc, Short minoff,
            Float maxvalh, Float maxvald, Float s1BiasValue, Date producttime,
            Short nisolbin, Short noutint, Short noutrep, Float areared,
            Float biscanr, Integer blockBinsReject, Integer clutterBinsRej,
            Integer binsSmoothed, Float scanBinsFilled, Float highElevAngle,
            Float scanRainArea, Short nbadscan, Short nhourout, Short volcovpat,
            Short opermode, String missper, Short supplmess,
            String gridFilename) {
        this.id = id;
        this.radarloc = radarloc;
        this.minoff = minoff;
        this.maxvalh = maxvalh;
        this.maxvald = maxvald;
        this.s1BiasValue = s1BiasValue;
        this.producttime = producttime;
        this.nisolbin = nisolbin;
        this.noutint = noutint;
        this.noutrep = noutrep;
        this.areared = areared;
        this.biscanr = biscanr;
        this.blockBinsReject = blockBinsReject;
        this.clutterBinsRej = clutterBinsRej;
        this.binsSmoothed = binsSmoothed;
        this.scanBinsFilled = scanBinsFilled;
        this.highElevAngle = highElevAngle;
        this.scanRainArea = scanRainArea;
        this.nbadscan = nbadscan;
        this.nhourout = nhourout;
        this.volcovpat = volcovpat;
        this.opermode = opermode;
        this.missper = missper;
        this.supplmess = supplmess;
        this.gridFilename = gridFilename;
    }

    @EmbeddedId
    @AttributeOverrides({
            @AttributeOverride(name = "radid", column = @Column(name = "radid", nullable = false, length = 3)),
            @AttributeOverride(name = "obstime", column = @Column(name = "obstime", nullable = false, length = 29)) })
    public DparadarId getId() {
        return this.id;
    }

    public void setId(DparadarId id) {
        this.id = id;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "radid", nullable = false, insertable = false, updatable = false)
    public Radarloc getRadarloc() {
        return this.radarloc;
    }

    public void setRadarloc(Radarloc radarloc) {
        this.radarloc = radarloc;
    }

    @Column(name = "minoff")
    public Short getMinoff() {
        return this.minoff;
    }

    public void setMinoff(Short minoff) {
        this.minoff = minoff;
    }

    @Column(name = "maxvalh", precision = 8, scale = 8)
    public Float getMaxvalh() {
        return this.maxvalh;
    }

    public void setMaxvalh(Float maxvalh) {
        this.maxvalh = maxvalh;
    }

    @Column(name = "maxvald", precision = 8, scale = 8)
    public Float getMaxvald() {
        return this.maxvald;
    }

    public void setMaxvald(Float maxvald) {
        this.maxvald = maxvald;
    }

    @Column(name = "s1_bias_value", precision = 8, scale = 8)
    public Float getS1BiasValue() {
        return this.s1BiasValue;
    }

    public void setS1BiasValue(Float s1BiasValue) {
        this.s1BiasValue = s1BiasValue;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "producttime", length = 29)
    public Date getProducttime() {
        return this.producttime;
    }

    public void setProducttime(Date producttime) {
        this.producttime = producttime;
    }

    @Column(name = "nisolbin")
    public Short getNisolbin() {
        return this.nisolbin;
    }

    public void setNisolbin(Short nisolbin) {
        this.nisolbin = nisolbin;
    }

    @Column(name = "noutint")
    public Short getNoutint() {
        return this.noutint;
    }

    public void setNoutint(Short noutint) {
        this.noutint = noutint;
    }

    @Column(name = "noutrep")
    public Short getNoutrep() {
        return this.noutrep;
    }

    public void setNoutrep(Short noutrep) {
        this.noutrep = noutrep;
    }

    @Column(name = "areared", precision = 8, scale = 8)
    public Float getAreared() {
        return this.areared;
    }

    public void setAreared(Float areared) {
        this.areared = areared;
    }

    @Column(name = "biscanr", precision = 8, scale = 8)
    public Float getBiscanr() {
        return this.biscanr;
    }

    public void setBiscanr(Float biscanr) {
        this.biscanr = biscanr;
    }

    @Column(name = "block_bins_reject")
    public Integer getBlockBinsReject() {
        return this.blockBinsReject;
    }

    public void setBlockBinsReject(Integer blockBinsReject) {
        this.blockBinsReject = blockBinsReject;
    }

    @Column(name = "clutter_bins_rej")
    public Integer getClutterBinsRej() {
        return this.clutterBinsRej;
    }

    public void setClutterBinsRej(Integer clutterBinsRej) {
        this.clutterBinsRej = clutterBinsRej;
    }

    @Column(name = "bins_smoothed")
    public Integer getBinsSmoothed() {
        return this.binsSmoothed;
    }

    public void setBinsSmoothed(Integer binsSmoothed) {
        this.binsSmoothed = binsSmoothed;
    }

    @Column(name = "scan_bins_filled", precision = 8, scale = 8)
    public Float getScanBinsFilled() {
        return this.scanBinsFilled;
    }

    public void setScanBinsFilled(Float scanBinsFilled) {
        this.scanBinsFilled = scanBinsFilled;
    }

    @Column(name = "high_elev_angle", precision = 8, scale = 8)
    public Float getHighElevAngle() {
        return this.highElevAngle;
    }

    public void setHighElevAngle(Float highElevAngle) {
        this.highElevAngle = highElevAngle;
    }

    @Column(name = "scan_rain_area", precision = 8, scale = 8)
    public Float getScanRainArea() {
        return this.scanRainArea;
    }

    public void setScanRainArea(Float scanRainArea) {
        this.scanRainArea = scanRainArea;
    }

    @Column(name = "nbadscan")
    public Short getNbadscan() {
        return this.nbadscan;
    }

    public void setNbadscan(Short nbadscan) {
        this.nbadscan = nbadscan;
    }

    @Column(name = "nhourout")
    public Short getNhourout() {
        return this.nhourout;
    }

    public void setNhourout(Short nhourout) {
        this.nhourout = nhourout;
    }

    @Column(name = "volcovpat")
    public Short getVolcovpat() {
        return this.volcovpat;
    }

    public void setVolcovpat(Short volcovpat) {
        this.volcovpat = volcovpat;
    }

    @Column(name = "opermode")
    public Short getOpermode() {
        return this.opermode;
    }

    public void setOpermode(Short opermode) {
        this.opermode = opermode;
    }

    @Column(name = "missper", length = 1)
    public String getMissper() {
        return this.missper;
    }

    public void setMissper(String missper) {
        this.missper = missper;
    }

    @Column(name = "supplmess")
    public Short getSupplmess() {
        return this.supplmess;
    }

    public void setSupplmess(Short supplmess) {
        this.supplmess = supplmess;
    }

    @Column(name = "grid_filename", length = 20)
    public String getGridFilename() {
        return this.gridFilename;
    }

    public void setGridFilename(String gridFilename) {
        this.gridFilename = gridFilename;
    }

    // Return all fields as comma separated value string
    @Override
    public String toString() {
        StringBuilder record = new StringBuilder();
        record.append("\nDparadar: \n{\nid: ").append(id);
        record.append("\nradarloc: ").append(getRadarloc());
        record.append("\nminoff: ").append(minoff);
        record.append(", maxvalh: ").append(maxvalh);
        record.append(", maxvald: ").append(maxvald);
        record.append(", s1BiasValue: ").append(s1BiasValue);
        record.append("\nproducttime: ").append(producttime);
        record.append(", nisolbin: ").append(nisolbin);
        record.append(", noutint: ").append(noutint);
        record.append(", noutrep: ").append(noutrep);
        record.append("\nareared: ").append(areared);
        record.append(", biscanr: ").append(biscanr);
        record.append(", blockBinsReject: ").append(blockBinsReject);
        record.append(", clutterBinsRej: ").append(clutterBinsRej);
        record.append("\nbinsSmoothed: ").append(binsSmoothed);
        record.append(", scanBinsFilled: ").append(scanBinsFilled);
        record.append(", highElevAngle: ").append(highElevAngle);
        record.append(", scanRainArea: ").append(scanRainArea);
        record.append("\nvolcovpat: ").append(volcovpat);
        record.append(", nhourout: ").append(nhourout);
        record.append(", opermode: ").append(opermode);
        record.append(", missper: ").append(missper);
        record.append("\nsupplmess: ").append(supplmess);
        record.append(", gridFilename: ").append(gridFilename).append("\n}");
        return record.toString();
    }
}
