/**
* This software was developed and / or modified by Raytheon Company,
* pursuant to Contract DG133W-05-CQ-1067 with the US Government.
* 
* U.S. EXPORT CONTROLLED TECHNICAL DATA
* This software product contains export-restricted data whose
* export/transfer/disclosure is restricted by U.S. law. Dissemination
* to non-U.S. persons whether in the United States or abroad requires
* an export license or other authorization.
* 
* Contractor Name:        Raytheon Company
* Contractor Address:     6825 Pine Street, Suite 340
*                         Mail Stop B8
*                         Omaha, NE 68106
*                         402.291.0100
* 
* See the AWIPS II Master Rights File ("Master Rights File.pdf") for
* further licensing information.
**/
package com.raytheon.uf.common.dataplugin.shef.tables;
// default package
// Generated Oct 17, 2008 2:22:17 PM by Hibernate Tools 3.2.2.GA

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Reservoir generated by hbm2java
 * 
 * 
 * <pre>
 * 
 * SOFTWARE HISTORY
 * Date         Ticket#    Engineer    Description
 * ------------ ---------- ----------- --------------------------
 * Oct 17, 2008                        Initial generation by hbm2java
 * Aug 19, 2011      10672     jkorman Move refactor to new project
 * Oct 07, 2013       2361     njensen Removed XML annotations
 * 
 * </pre>
 * 
 * @author jkorman
 * @version 1.1
 */
@Entity
@Table(name = "reservoir")
@com.raytheon.uf.common.serialization.annotations.DynamicSerialize
public class Reservoir extends com.raytheon.uf.common.dataplugin.persist.PersistableDataObject implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    @com.raytheon.uf.common.serialization.annotations.DynamicSerializeElement
    private String lid;

    @com.raytheon.uf.common.serialization.annotations.DynamicSerializeElement
    private Damtypes damtypes;

    @com.raytheon.uf.common.serialization.annotations.DynamicSerializeElement
    private Location location;

    @com.raytheon.uf.common.serialization.annotations.DynamicSerializeElement
    private Resowner resowner;

    @com.raytheon.uf.common.serialization.annotations.DynamicSerializeElement
    private String name;

    @com.raytheon.uf.common.serialization.annotations.DynamicSerializeElement
    private Double deadpool;

    @com.raytheon.uf.common.serialization.annotations.DynamicSerializeElement
    private Double conserpool;

    @com.raytheon.uf.common.serialization.annotations.DynamicSerializeElement
    private Double floodpool;

    @com.raytheon.uf.common.serialization.annotations.DynamicSerializeElement
    private Double spillway;

    @com.raytheon.uf.common.serialization.annotations.DynamicSerializeElement
    private Double sill;

    @com.raytheon.uf.common.serialization.annotations.DynamicSerializeElement
    private Double top;

    @com.raytheon.uf.common.serialization.annotations.DynamicSerializeElement
    private Double surchg;

    @com.raytheon.uf.common.serialization.annotations.DynamicSerializeElement
    private Double elev;

    @com.raytheon.uf.common.serialization.annotations.DynamicSerializeElement
    private Integer gates;

    @com.raytheon.uf.common.serialization.annotations.DynamicSerializeElement
    private Date impounded;

    @com.raytheon.uf.common.serialization.annotations.DynamicSerializeElement
    private String uses;

    @com.raytheon.uf.common.serialization.annotations.DynamicSerializeElement
    private String damids;

    @com.raytheon.uf.common.serialization.annotations.DynamicSerializeElement
    private String damidn;

    @com.raytheon.uf.common.serialization.annotations.DynamicSerializeElement
    private Set<Rescap> rescaps = new HashSet<Rescap>(0);

    public Reservoir() {
    }

    public Reservoir(String lid, Damtypes damtypes, Location location,
            Resowner resowner) {
        this.lid = lid;
        this.damtypes = damtypes;
        this.location = location;
        this.resowner = resowner;
    }

    public Reservoir(String lid, Damtypes damtypes, Location location,
            Resowner resowner, String name, Double deadpool, Double conserpool,
            Double floodpool, Double spillway, Double sill, Double top,
            Double surchg, Double elev, Integer gates, Date impounded,
            String uses, String damids, String damidn, Set<Rescap> rescaps) {
        this.lid = lid;
        this.damtypes = damtypes;
        this.location = location;
        this.resowner = resowner;
        this.name = name;
        this.deadpool = deadpool;
        this.conserpool = conserpool;
        this.floodpool = floodpool;
        this.spillway = spillway;
        this.sill = sill;
        this.top = top;
        this.surchg = surchg;
        this.elev = elev;
        this.gates = gates;
        this.impounded = impounded;
        this.uses = uses;
        this.damids = damids;
        this.damidn = damidn;
        this.rescaps = rescaps;
    }

    @Id
    @Column(name = "lid", unique = true, nullable = false, length = 8)
    public String getLid() {
        return this.lid;
    }

    public void setLid(String lid) {
        this.lid = lid;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "type", nullable = false)
    public Damtypes getDamtypes() {
        return this.damtypes;
    }

    public void setDamtypes(Damtypes damtypes) {
        this.damtypes = damtypes;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "lid", unique = true, nullable = false, insertable = false, updatable = false)
    public Location getLocation() {
        return this.location;
    }

    public void setLocation(Location location) {
        this.location = location;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "owner", nullable = false)
    public Resowner getResowner() {
        return this.resowner;
    }

    public void setResowner(Resowner resowner) {
        this.resowner = resowner;
    }

    @Column(name = "name", length = 20)
    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @Column(name = "deadpool", precision = 17, scale = 17)
    public Double getDeadpool() {
        return this.deadpool;
    }

    public void setDeadpool(Double deadpool) {
        this.deadpool = deadpool;
    }

    @Column(name = "conserpool", precision = 17, scale = 17)
    public Double getConserpool() {
        return this.conserpool;
    }

    public void setConserpool(Double conserpool) {
        this.conserpool = conserpool;
    }

    @Column(name = "floodpool", precision = 17, scale = 17)
    public Double getFloodpool() {
        return this.floodpool;
    }

    public void setFloodpool(Double floodpool) {
        this.floodpool = floodpool;
    }

    @Column(name = "spillway", precision = 17, scale = 17)
    public Double getSpillway() {
        return this.spillway;
    }

    public void setSpillway(Double spillway) {
        this.spillway = spillway;
    }

    @Column(name = "sill", precision = 17, scale = 17)
    public Double getSill() {
        return this.sill;
    }

    public void setSill(Double sill) {
        this.sill = sill;
    }

    @Column(name = "top", precision = 17, scale = 17)
    public Double getTop() {
        return this.top;
    }

    public void setTop(Double top) {
        this.top = top;
    }

    @Column(name = "surchg", precision = 17, scale = 17)
    public Double getSurchg() {
        return this.surchg;
    }

    public void setSurchg(Double surchg) {
        this.surchg = surchg;
    }

    @Column(name = "elev", precision = 17, scale = 17)
    public Double getElev() {
        return this.elev;
    }

    public void setElev(Double elev) {
        this.elev = elev;
    }

    @Column(name = "gates")
    public Integer getGates() {
        return this.gates;
    }

    public void setGates(Integer gates) {
        this.gates = gates;
    }

    @Temporal(TemporalType.DATE)
    @Column(name = "impounded", length = 13)
    public Date getImpounded() {
        return this.impounded;
    }

    public void setImpounded(Date impounded) {
        this.impounded = impounded;
    }

    @Column(name = "uses", length = 8)
    public String getUses() {
        return this.uses;
    }

    public void setUses(String uses) {
        this.uses = uses;
    }

    @Column(name = "damids", length = 2)
    public String getDamids() {
        return this.damids;
    }

    public void setDamids(String damids) {
        this.damids = damids;
    }

    @Column(name = "damidn", length = 5)
    public String getDamidn() {
        return this.damidn;
    }

    public void setDamidn(String damidn) {
        this.damidn = damidn;
    }

    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER, mappedBy = "reservoir")
    public Set<Rescap> getRescaps() {
        return this.rescaps;
    }

    public void setRescaps(Set<Rescap> rescaps) {
        this.rescaps = rescaps;
    }

}
