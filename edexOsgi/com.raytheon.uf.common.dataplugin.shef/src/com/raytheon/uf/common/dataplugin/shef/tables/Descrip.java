/**
* This software was developed and / or modified by Raytheon Company,
* pursuant to Contract DG133W-05-CQ-1067 with the US Government.
* 
* U.S. EXPORT CONTROLLED TECHNICAL DATA
* This software product contains export-restricted data whose
* export/transfer/disclosure is restricted by U.S. law. Dissemination
* to non-U.S. persons whether in the United States or abroad requires
* an export license or other authorization.
* 
* Contractor Name:        Raytheon Company
* Contractor Address:     6825 Pine Street, Suite 340
*                         Mail Stop B8
*                         Omaha, NE 68106
*                         402.291.0100
* 
* See the AWIPS II Master Rights File ("Master Rights File.pdf") for
* further licensing information.
**/
package com.raytheon.uf.common.dataplugin.shef.tables;
// default package
// Generated Oct 17, 2008 2:22:17 PM by Hibernate Tools 3.2.2.GA

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

/**
 * Descrip generated by hbm2java
 * 
 * 
 * <pre>
 * 
 * SOFTWARE HISTORY
 * Date         Ticket#    Engineer    Description
 * ------------ ---------- ----------- --------------------------
 * Oct 17, 2008                        Initial generation by hbm2java
 * Aug 19, 2011      10672     jkorman Move refactor to new project
 * Oct 07, 2013       2361     njensen Removed XML annotations
 * 
 * </pre>
 * 
 * @author jkorman
 * @version 1.1
 */
@Entity
@Table(name = "descrip")
@com.raytheon.uf.common.serialization.annotations.DynamicSerialize
public class Descrip extends com.raytheon.uf.common.dataplugin.persist.PersistableDataObject implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    @com.raytheon.uf.common.serialization.annotations.DynamicSerializeElement
    private String lid;

    @com.raytheon.uf.common.serialization.annotations.DynamicSerializeElement
    private Riverstat riverstat;

    @com.raytheon.uf.common.serialization.annotations.DynamicSerializeElement
    private Proximity proximity;

    @com.raytheon.uf.common.serialization.annotations.DynamicSerializeElement
    private String bed;

    @com.raytheon.uf.common.serialization.annotations.DynamicSerializeElement
    private String divert;

    @com.raytheon.uf.common.serialization.annotations.DynamicSerializeElement
    private String remark;

    @com.raytheon.uf.common.serialization.annotations.DynamicSerializeElement
    private String ice;

    @com.raytheon.uf.common.serialization.annotations.DynamicSerializeElement
    private String reach;

    @com.raytheon.uf.common.serialization.annotations.DynamicSerializeElement
    private String res;

    @com.raytheon.uf.common.serialization.annotations.DynamicSerializeElement
    private String topo;

    public Descrip() {
    }

    public Descrip(String lid, Riverstat riverstat, Proximity proximity) {
        this.lid = lid;
        this.riverstat = riverstat;
        this.proximity = proximity;
    }

    public Descrip(String lid, Riverstat riverstat, Proximity proximity,
            String bed, String divert, String remark, String ice, String reach,
            String res, String topo) {
        this.lid = lid;
        this.riverstat = riverstat;
        this.proximity = proximity;
        this.bed = bed;
        this.divert = divert;
        this.remark = remark;
        this.ice = ice;
        this.reach = reach;
        this.res = res;
        this.topo = topo;
    }

    @Id
    @Column(name = "lid", unique = true, nullable = false, length = 8)
    public String getLid() {
        return this.lid;
    }

    public void setLid(String lid) {
        this.lid = lid;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "lid", unique = true, nullable = false, insertable = false, updatable = false)
    public Riverstat getRiverstat() {
        return this.riverstat;
    }

    public void setRiverstat(Riverstat riverstat) {
        this.riverstat = riverstat;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "proximity", nullable = false)
    public Proximity getProximity() {
        return this.proximity;
    }

    public void setProximity(Proximity proximity) {
        this.proximity = proximity;
    }

    @Column(name = "bed", length = 60)
    public String getBed() {
        return this.bed;
    }

    public void setBed(String bed) {
        this.bed = bed;
    }

    @Column(name = "divert", length = 60)
    public String getDivert() {
        return this.divert;
    }

    public void setDivert(String divert) {
        this.divert = divert;
    }

    @Column(name = "remark")
    public String getRemark() {
        return this.remark;
    }

    public void setRemark(String remark) {
        this.remark = remark;
    }

    @Column(name = "ice", length = 160)
    public String getIce() {
        return this.ice;
    }

    public void setIce(String ice) {
        this.ice = ice;
    }

    @Column(name = "reach", length = 80)
    public String getReach() {
        return this.reach;
    }

    public void setReach(String reach) {
        this.reach = reach;
    }

    @Column(name = "res")
    public String getRes() {
        return this.res;
    }

    public void setRes(String res) {
        this.res = res;
    }

    @Column(name = "topo")
    public String getTopo() {
        return this.topo;
    }

    public void setTopo(String topo) {
        this.topo = topo;
    }

}
