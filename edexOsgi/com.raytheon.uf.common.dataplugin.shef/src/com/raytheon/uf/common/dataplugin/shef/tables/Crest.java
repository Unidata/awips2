/**
* This software was developed and / or modified by Raytheon Company,
* pursuant to Contract DG133W-05-CQ-1067 with the US Government.
* 
* U.S. EXPORT CONTROLLED TECHNICAL DATA
* This software product contains export-restricted data whose
* export/transfer/disclosure is restricted by U.S. law. Dissemination
* to non-U.S. persons whether in the United States or abroad requires
* an export license or other authorization.
* 
* Contractor Name:        Raytheon Company
* Contractor Address:     6825 Pine Street, Suite 340
*                         Mail Stop B8
*                         Omaha, NE 68106
*                         402.291.0100
* 
* See the AWIPS II Master Rights File ("Master Rights File.pdf") for
* further licensing information.
**/
package com.raytheon.uf.common.dataplugin.shef.tables;
// default package
// Generated Oct 17, 2008 2:22:17 PM by Hibernate Tools 3.2.2.GA

import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

/**
 * Crest generated by hbm2java
 * 
 * 
 * <pre>
 * 
 * SOFTWARE HISTORY
 * Date         Ticket#    Engineer    Description
 * ------------ ---------- ----------- --------------------------
 * Oct 17, 2008                        Initial generation by hbm2java
 * Aug 19, 2011      10672     jkorman Move refactor to new project
 * Oct 07, 2013       2361     njensen Removed XML annotations
 * 
 * </pre>
 * 
 * @author jkorman
 * @version 1.1
 */
@Entity
@Table(name = "crest")
@com.raytheon.uf.common.serialization.annotations.DynamicSerialize
public class Crest extends com.raytheon.uf.common.dataplugin.persist.PersistableDataObject implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    @com.raytheon.uf.common.serialization.annotations.DynamicSerializeElement
    private CrestId id;

    @com.raytheon.uf.common.serialization.annotations.DynamicSerializeElement
    private Riverstat riverstat;

    @com.raytheon.uf.common.serialization.annotations.DynamicSerializeElement
    private String cremark;

    @com.raytheon.uf.common.serialization.annotations.DynamicSerializeElement
    private String hw;

    @com.raytheon.uf.common.serialization.annotations.DynamicSerializeElement
    private String jam;

    @com.raytheon.uf.common.serialization.annotations.DynamicSerializeElement
    private String olddatum;

    @com.raytheon.uf.common.serialization.annotations.DynamicSerializeElement
    private Integer q;

    @com.raytheon.uf.common.serialization.annotations.DynamicSerializeElement
    private Double stage;

    @com.raytheon.uf.common.serialization.annotations.DynamicSerializeElement
    private String suppress;

    @com.raytheon.uf.common.serialization.annotations.DynamicSerializeElement
    private String prelim;

    public Crest() {
    }

    public Crest(CrestId id, Riverstat riverstat) {
        this.id = id;
        this.riverstat = riverstat;
    }

    public Crest(CrestId id, Riverstat riverstat, String cremark, String hw,
            String jam, String olddatum, Integer q, Double stage,
            String suppress, String prelim) {
        this.id = id;
        this.riverstat = riverstat;
        this.cremark = cremark;
        this.hw = hw;
        this.jam = jam;
        this.olddatum = olddatum;
        this.q = q;
        this.stage = stage;
        this.suppress = suppress;
        this.prelim = prelim;
    }

    @EmbeddedId
    @AttributeOverrides( {
            @AttributeOverride(name = "lid", column = @Column(name = "lid", nullable = false, length = 8)),
            @AttributeOverride(name = "datcrst", column = @Column(name = "datcrst", nullable = false, length = 13)),
            @AttributeOverride(name = "timcrst", column = @Column(name = "timcrst", nullable = false, length = 5)) })
    public CrestId getId() {
        return this.id;
    }

    public void setId(CrestId id) {
        this.id = id;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "lid", nullable = false, insertable = false, updatable = false)
    public Riverstat getRiverstat() {
        return this.riverstat;
    }

    public void setRiverstat(Riverstat riverstat) {
        this.riverstat = riverstat;
    }

    @Column(name = "cremark", length = 80)
    public String getCremark() {
        return this.cremark;
    }

    public void setCremark(String cremark) {
        this.cremark = cremark;
    }

    @Column(name = "hw", length = 1)
    public String getHw() {
        return this.hw;
    }

    public void setHw(String hw) {
        this.hw = hw;
    }

    @Column(name = "jam", length = 1)
    public String getJam() {
        return this.jam;
    }

    public void setJam(String jam) {
        this.jam = jam;
    }

    @Column(name = "olddatum", length = 1)
    public String getOlddatum() {
        return this.olddatum;
    }

    public void setOlddatum(String olddatum) {
        this.olddatum = olddatum;
    }

    @Column(name = "q")
    public Integer getQ() {
        return this.q;
    }

    public void setQ(Integer q) {
        this.q = q;
    }

    @Column(name = "stage", precision = 17, scale = 17)
    public Double getStage() {
        return this.stage;
    }

    public void setStage(Double stage) {
        this.stage = stage;
    }

    @Column(name = "suppress", length = 1)
    public String getSuppress() {
        return this.suppress;
    }

    public void setSuppress(String suppress) {
        this.suppress = suppress;
    }

    @Column(name = "prelim", length = 1)
    public String getPrelim() {
        return this.prelim;
    }

    public void setPrelim(String prelim) {
        this.prelim = prelim;
    }

}
