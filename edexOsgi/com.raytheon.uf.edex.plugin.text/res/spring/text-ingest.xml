<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
  http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">
    <bean class="com.raytheon.uf.common.status.logback.ThreadBasedAppender" factory-method="registerThreadPattern">
        <constructor-arg value="text" />
        <constructor-arg value="Ingest.Text.*" />
    </bean>

	<bean id="textDecoder" class="com.raytheon.uf.edex.plugin.text.TextDecoder">
		<property name="pluginName" value="text" />
		<property name="decoderMode" value="STD" />
	</bean>

	<bean id="textDistRegistry" factory-bean="distributionSrv"
		factory-method="register">
		<constructor-arg value="text" />
		<constructor-arg value="jms-durable:queue:Ingest.Text"/>
	</bean>

	<bean id="textHandleoupDistRegistry" factory-bean="handleoupDistributionSrv"
		factory-method="register">
		<constructor-arg value="text" />
		<constructor-arg value="jms-durable:queue:Ingest.Text"/>
	</bean>

	<!-- define the bean that handles automatic faxing of products. -->
	<bean id="autoFaxManager" class="com.raytheon.uf.edex.plugin.text.subscription.AutoFaxManager">
	</bean>

    <!-- verify text product info for site, spawns in separate thread to not delay start up -->
    <bean id="textVersionPurge" class="com.raytheon.uf.edex.plugin.text.TextVersionPurge" depends-on="textRegistered"/>

    <bean id="afosToAwipsListener" class="com.raytheon.uf.edex.plugin.text.ingest.AfosToAwipsListener" />
    <bean id="afosBrowserListener" class="com.raytheon.uf.edex.plugin.text.ingest.AfosBrowserModelSubscriber" />
    
    <bean factory-bean="ndmProc" factory-method="registerListener">
        <constructor-arg value="afos2awips.txt" />
        <constructor-arg ref="afosToAwipsListener" />
    </bean>

    <bean factory-bean="ndmProc" factory-method="registerListener">
        <constructor-arg value="textCCChelp.txt" />
        <constructor-arg ref="afosBrowserListener" />
    </bean>
    <bean factory-bean="ndmProc" factory-method="registerListener">
        <constructor-arg value="textNNNhelp.txt" />
        <constructor-arg ref="afosBrowserListener" />
    </bean>
    <bean factory-bean="ndmProc" factory-method="registerListener">
        <constructor-arg value="textCategoryClass.txt" />
        <constructor-arg ref="afosBrowserListener" />
    </bean>
    <bean factory-bean="ndmProc" factory-method="registerListener">
        <constructor-arg value="textOriginTable.txt" />
        <constructor-arg ref="afosBrowserListener" />
    </bean>
    <bean factory-bean="ndmProc" factory-method="registerListener">
        <constructor-arg value="afosMasterPIL.txt" />
        <constructor-arg ref="afosBrowserListener" />
    </bean>
    
    <!-- textdb -->
    <bean id="textDBStaticDataListener" class="com.raytheon.uf.edex.plugin.text.ingest.TextDBStaticDataSubscriber">
        <constructor-arg value="jms-generic:topic:textDBFilesChanged"/>
    </bean>
    <bean id="siteMapListener" class="com.raytheon.uf.edex.plugin.text.ingest.SiteMapNationalDatasetSubscriber" />

    <bean factory-bean="ndmProc" factory-method="registerListener">
        <constructor-arg value="bit_table.dat" />
        <constructor-arg ref="textDBStaticDataListener" />
    </bean>
    <bean factory-bean="ndmProc" factory-method="registerListener">
        <constructor-arg value="collective_table.dat" />
        <constructor-arg ref="textDBStaticDataListener" />
    </bean>
    <bean factory-bean="ndmProc" factory-method="registerListener">
        <constructor-arg value="exclusionProductList.dat" />
        <constructor-arg ref="textDBStaticDataListener" />
    </bean>
    <bean factory-bean="ndmProc" factory-method="registerListener">
        <constructor-arg value="ispan_table.dat" />
        <constructor-arg ref="textDBStaticDataListener" />
    </bean>
    <bean factory-bean="ndmProc" factory-method="registerListener">
        <constructor-arg value="station_table.dat" />
        <constructor-arg ref="textDBStaticDataListener" />
    </bean>
    <bean factory-bean="ndmProc" factory-method="registerListener">
        <constructor-arg value="upair_table.dat" />
        <constructor-arg ref="textDBStaticDataListener" />
    </bean>
    <bean factory-bean="ndmProc" factory-method="registerListener">
        <constructor-arg value="afos_lookup_table.dat" />
        <constructor-arg ref="siteMapListener" />
    </bean>
    <bean factory-bean="ndmProc" factory-method="registerListener">
        <constructor-arg value="national_category_table.template" />
        <constructor-arg ref="siteMapListener" />
    </bean>
    
    <!-- subscription -->
    
    <!-- define the bean that handles Quartz scheduled script running -->
    <bean id="timerScriptRunner" class="com.raytheon.uf.edex.plugin.text.subscription.services.ScriptRunner" >
        <property name="type" value="timer" />
    </bean>
    
	<camelContext id="text-camel"
		xmlns="http://camel.apache.org/schema/spring"
		errorHandlerRef="errorHandler">
		<!--
		<endpoint id="textFileEndpoint" uri="file:${edex.home}/data/sbn/text?noop=true&amp;idempotent=false" />

		<route id="textFileConsumerRoute">
			<from ref="textFileEndpoint" />
			<bean ref="fileToString" />
			<setHeader headerName="pluginName">
				<constant>text</constant>
			</setHeader>
			<to uri="jms-durable:queue:Ingest.Text" />
		</route>
		-->
                
        <!-- Refer to edex.xml for name/location of properties file -->
        <endpoint id="runnerCron" uri="quartz://runner/runnerScheduled/?cron=${subscription.cron}"/>

		<!--
          Text routes.
          If an internal route (see ContextManager.INTERNAL_ENDPOINT_TYPES) is being sent data from another internal
          route in the same context it needs to come after the route that sends it data for proper startup/shutdown order.
		-->
        <route id="textUndecodedIngestRoute">
            <from uri="jms-durable:queue:Ingest.Text?concurrentConsumers=2" />
            <setHeader headerName="pluginName">
                <constant>text</constant>
            </setHeader>
            <doTry>
                <pipeline>
                    <bean ref="stringToFile" />
                    <bean ref="textDecoder" method="decodeFile" />
                    <bean ref="processUtil" method="log"/>
                    <multicast>
                        <!-- This route needs to go to Mark's  -->
                        <to uri="direct:textToWatchWarn"/>
                        <to uri="direct:textSerializeRoute" />
                        <to uri="direct:textPurgeAccumulate" />
                        <to uri="vm:autoFaxRoute" />
                    </multicast>
                </pipeline>
                <doCatch>
                    <exception>java.lang.Throwable</exception>
                    <to uri="log:text?level=INFO"/>
                </doCatch>
            </doTry>
        </route>

		<route id="textDirectDecodedIngestRoute">
			<from uri="direct-vm:textDirectDecodedIngestRoute" />
			<setHeader headerName="pluginName">
				<constant>text</constant>
			</setHeader>
			<doTry>
				<pipeline>
					<bean ref="textDecoder" method="writeTextProduct" />
					<bean ref="processUtil" method="log"/>
					<multicast>
						<to uri="direct:textToWatchWarn"/>
						<to uri="direct:textSerializeRoute" />
						<to uri="direct:textPurgeAccumulate" />
						<to uri="vm:autoFaxRoute" />
					</multicast>
				</pipeline>
				<doCatch>
					<exception>java.lang.Throwable</exception>
					<to uri="log:text?level=INFO"/>
				</doCatch>
			</doTry>
		</route>

		<route id="textDirectUndecodedIngestRoute">
			<from uri="direct-vm:textDirectUndecodedIngestRoute" />
			<setHeader headerName="pluginName">
				<constant>text</constant>
			</setHeader>
			<doTry>
				<pipeline>
					<bean ref="textDecoder" method="decode" />
					<bean ref="processUtil" method="log"/>
					<multicast>
						<to uri="direct:textToWatchWarn"/>
						<to uri="direct:textSerializeRoute" />
						<to uri="direct:textPurgeAccumulate" />
						<to uri="vm:autoFaxRoute" />
					</multicast>
				</pipeline>
				<doCatch>
					<exception>java.lang.Throwable</exception>
					<to uri="log:text?level=INFO"/>
				</doCatch>
			</doTry>
		</route>

		<route id="textToWatchWarnRoute">
			<from uri="direct:textToWatchWarn" />
			<bean ref="textDecoder" method="transformToProductIds" />
			<to uri="jms-durable:queue:watchwarn" />
		</route>

		<route id="textSerializationRoute">
			<from uri="direct:textSerializeRoute" />
			<split streaming="true" >
				<method bean="textDecoder" method="separator" />
				<bean ref="textDecoder" method="transformToSimpleString" />
				<bean ref="serializationUtil" method="transformToThrift"/>
				<to uri="jms-generic:topic:edex.alarms.msg?timeToLive=60000" />
			</split>
		</route>

		<route id="textPurgeAccumulateRoute">
			<from uri="direct:textPurgeAccumulate" />
			<bean ref="textVersionPurge" method="accumulateAfosIdToPurge" />
		</route>

		<route id="textPurgeSendRoute">
		    <from uri="timer://textPurgeSend?period=60s" />
			<doTry>
				<bean ref="textVersionPurge" method="getAfosIdsToPurge"/>
				<to uri="jms-generic:queue:textPurgeRequest" />
				<doCatch>
					<exception>java.lang.Throwable</exception>
					<to uri="log:purge?level=ERROR"/>
				</doCatch>
			</doTry>
		</route>

		<!-- AutoFax route -->
		<route id="autoFaxRoute">
			<from uri="vm:autoFaxRoute" />
			<doTry>
				<bean ref="autoFaxManager" method="processEvent" />
				<doCatch>
					<exception>java.lang.Throwable</exception>
					<to uri="log:autoFax?level=ERROR"/>
				</doCatch>
			</doTry>
		</route>
                
        <route id="textDBStaticSetDirty">
            <from uri="jms-generic:topic:textDBFilesChanged"/>
            <bean ref="textDBStaticDataListener" method="setDirty"/>
        </route>

        <!-- Quartz Timer triggered script runner -->
        <route id="runnerScheduled">
            <from uri="runnerCron" />
            <doTry>
                <bean ref="timerScriptRunner" method="runScripts" />
                <doCatch>
                    <exception>java.lang.Throwable</exception>
                    <to uri="log:subscription?level=ERROR"/>
                </doCatch>
            </doTry>
        </route>

        <!-- LDAD (watch/warn) triggered script runner -->
        <route id="ldadWatchWarn">
           <from uri="jms-durable:queue:watchwarn"/>
           <doTry>
               <bean ref="ldadScriptRunner" method="runScripts" />
               <doCatch>
                    <exception>java.lang.Throwable</exception>
                    <to uri="log:subscription?level=ERROR"/>
               </doCatch>
           </doTry>
        </route>
	</camelContext>

	<camelContext id="clustered-text-camel"
		xmlns="http://camel.apache.org/schema/spring"
		errorHandlerRef="errorHandler">
		<!-- TextPurge route -->
		<route id="textPurgeRequestRoute">
			<from uri="jms-generic:queue:textPurgeRequest" />
			<doTry>
				<bean ref="textVersionPurge" method="addAfosIdsToPurge"/>
				<doCatch>
					<exception>java.lang.Throwable</exception>
					<to uri="log:purge?level=ERROR"/>
				</doCatch>
			</doTry>
		</route>
		<route id="textPurgeRoute">
		    <from uri="timer://textPurge?period=60s" />
			<doTry>
				<bean ref="textVersionPurge" method="purgeAfosIds"/>
				<doCatch>
					<exception>java.lang.Throwable</exception>
					<to uri="log:purge?level=ERROR"/>
				</doCatch>
			</doTry>
		</route>
	</camelContext>

	<bean factory-bean="contextManager" factory-method="registerClusteredContext">
		<constructor-arg ref="clustered-text-camel" />
  	</bean>
</beans>
