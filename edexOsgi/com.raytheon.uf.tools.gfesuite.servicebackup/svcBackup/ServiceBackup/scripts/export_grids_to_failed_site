#!/bin/bash

##
# This software was developed and / or modified by Raytheon Company,
# pursuant to Contract DG133W-05-CQ-1067 with the US Government.
# 
# U.S. EXPORT CONTROLLED TECHNICAL DATA
# This software product contains export-restricted data whose
# export/transfer/disclosure is restricted by U.S. law. Dissemination
# to non-U.S. persons whether in the United States or abroad requires
# an export license or other authorization.
# 
# Contractor Name:        Raytheon Company
# Contractor Address:     6825 Pine Street, Suite 340
#                         Mail Stop B8
#                         Omaha, NE 68106
#                         402.291.0100
# 
# See the AWIPS II Master Rights File ("Master Rights File.pdf") for
# further licensing information.
#
##

##
#
# SOFTWARE HISTORY
# Date         Ticket#    Engineer    Description
# ------------ ---------- ----------- --------------------------
# Feb 09, 2015  #4103     dgilling    Refactored to support multiple svcbu 
#                                     sites.
# Mar 23, 2015  #4103     dgilling    Fix script for dual-domain.
# Jul 15, 2016  #5747     dgilling    Move edex_static to common_static.
#
##


if [ ${#AWIPS_HOME} = 0 ]
then
        path_to_script=`readlink -f $0`
		export AWIPS_HOME=$(dirname $(dirname $(dirname $(dirname  $path_to_script))))
fi

. ${AWIPS_HOME}/GFESuite/ServiceBackup/configuration/svcbu.env
source ${AWIPS_HOME}/GFESuite/ServiceBackup/scripts/serviceBackupUtil.sh

if [ $# -ne 1 ]
then
   echo "Incorrect number of arguments\nCorrect usage: export_grids_to_failed_site failed_site"
   exit 1
fi

# $1 = Failed site
FAILED_SITE=`echo ${1} | tr '[A-Z]' '[a-z]'`
FAILED_CAPS_SITE=`echo ${1} | tr [a-z] [A-Z]`
export FAILED_SITE

# Create the log file
configureLogging "svcbu_export_bksite_grids" ${FAILED_SITE}

# Check the status of the lock file to see if we are OK to proceed
lock_file=$(getLockFile "exportBkSiteGrids" ${FAILED_SITE})
lock_status=$(isOperationInProgress "exportBkSiteGrids" ${FAILED_SITE})
if [[ "${lock_status}" = "true" ]]
then
	echo "Cannot export grids back to ${FAILED_SITE}.  Export grids process already in progress!"
	exit 1
fi

echo "IN_PROGRESS" > ${lock_file}

#
# If this is a non-wfo/non-rfc site, they may not have an edit area for clipping - handle it
#
if [ "$SVCBU_GRIDAREA" == "" ] ; then
   SVCBU_MASK=""
else
   SVCBU_MASK="-m $SVCBU_GRIDAREA"
fi

echo "Starting exporting grids..."

OUTPUT_DIR=$(getTempDirectory "export_grids_to_failed_site" ${FAILED_SITE})

#Starting ifpnetCDF to pack the grids
echo "Running ifpnetCDF..."
${GFESUITE_BIN}/ifpnetCDF -o ${OUTPUT_DIR}/${FAILED_SITE}Grd.netcdf -h $SVCBU_HOST -r $CDSPORT -d ${FAILED_CAPS_SITE}_GRID__Official_00000000_0000 -k -t -c ${SVCBU_MASK}
if [ $? -ne 0 ]; then
    echo "ERROR: ifpnetCDF failed."
    echo "FAILED" > ${lock_file}
    exit 1
fi

#
echo "Preparing package for msg_send."

subj=${FAILED_SITE}Grd
echo "The subject line of msg_send is $subj"

#
#calling msg_send to send the data to the failed site
echo "Sending the gridded data to ${FAILED_CAPS_SITE}..."
# We need to add another -c command in message hanlding system.
# Send the grids to the failed site
cd ${OUTPUT_DIR}

failed_config=${LOCALIZATION_PATH}/common_static/site/${FAILED_CAPS_SITE}/gfe/config/siteConfig.py
FAILED_MHSID=$(grep -E "GFESUITE_SRC_MHSID" ${failed_config})
FAILED_MHSID=`echo ${FAILED_MHSID} | sed -r "s/^\s*GFESUITE_SRC_MHSID\s*=\s*(['\"])(.*?)\1\s*$/\2/"`

# these lines are commented out for DR14441
# A1 expects to receive a file in gz format
# for now this change brings A2 in line with A1
# this may return to the original design after all sites are on A2
#
# echo ${FAILED_SITE} > siteID.txt
# tar cf Grd.tar ${FAILED_SITE}Grd.netcdf.gz siteID.txt
# msgSendOutput=$($MSG_SEND_COMMAND -e ${OUTPUT_DIR}/Grd.tar -a ${FAILED_MHSID} -s $subj -c 25)

# begin changes for 14441
msgSendOutput=$($MSG_SEND_COMMAND -e ${FAILED_SITE}Grd.netcdf.gz -a ${FAILED_MHSID} -s $subj -c 25)
# end changes for 14441

exitValue=$?
if [ $exitValue -ne 0 ]
then
    echo "msg_send has failed to send ${OUTPUT_DIR}/Grd.tar"
    echo "msg_send FAILED with exit value $exitValue and the following error: $msgSendOutput"
    echo "FAILED" > ${lock_file}
    rm -f ${OUTPUT_DIR}/${FAILED_SITE}Grd.netcdf*
    exit 1
fi
echo "Successfully sent message. MESSAGE ID: $msgSendOutput"
echo "Grids successfully exported"
echo "SUCCESS" > ${lock_file}
#delete the temporary netCDF file as well.
rm -f ${OUTPUT_DIR}/${FAILED_SITE}Grd.netcdf.*
rm -f ${OUTPUT_DIR}/Grd.tar
echo "All done. Export Gridded data has completed" 
exit 0

