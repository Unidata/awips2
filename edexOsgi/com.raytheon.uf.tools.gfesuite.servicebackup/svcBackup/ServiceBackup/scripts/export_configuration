#!/bin/bash

##
# This software was developed and / or modified by Raytheon Company,
# pursuant to Contract DG133W-05-CQ-1067 with the US Government.
# 
# U.S. EXPORT CONTROLLED TECHNICAL DATA
# This software product contains export-restricted data whose
# export/transfer/disclosure is restricted by U.S. law. Dissemination
# to non-U.S. persons whether in the United States or abroad requires
# an export license or other authorization.
# 
# Contractor Name:        Raytheon Company
# Contractor Address:     6825 Pine Street, Suite 340
#                         Mail Stop B8
#                         Omaha, NE 68106
#                         402.291.0100
# 
# See the AWIPS II Master Rights File ("Master Rights File.pdf") for
# further licensing information.
#
##

##
#
# SOFTWARE HISTORY
#
# Date          Ticket#  Engineer       Description
# ------------- -------- -------------- ----------------------------------------
# Feb 09, 2015  4103     dgilling       Refactored to support multiple svcbu 
#                                       sites.
# Mar 23, 2015  4308     dgilling       Export mixedCaseProductIds.txt.
# Apr 28, 2015  4427     dgilling       Support subdomains of the
#                                       primary domains.
# Aug 10, 2015  17443    lshi           Bug in scripts results in  
#                                       rsync_parms.ccc file not getting used
# Jul 15, 2016  5747     dgilling       Move edex_static to common_static.
# Aug 22, 2018  7438     dgilling       Backup DefaultAreaDictionary.py and 
#                                       DefaultCityLocation.py to preserve 
#                                       backward compatibility between 
#                                       18.1 -> 17.3.
# May 17, 2019  20105    mgamazaychikov Append GFESUITE_MHSID to siteConfig.py
# Sep 13, 2019  #7882    dgilling       Exclude python 3 cache dir from exported
#                                       configuration. 
# Feb 25, 2020  #7882    randerso       Change name of exported configuration to xxx3
# May 01, 2020  8153     randerso       Removed export of mixedCaseProductIds.txt
#
##



if [ ${#AWIPS_HOME} = 0 ]
then
        path_to_script=`readlink -f $0`
        export AWIPS_HOME=$(dirname $(dirname $(dirname $(dirname  $path_to_script))))
fi

# $1 = Site name

source ${AWIPS_HOME}/edex/bin/setup.env
source ${AWIPS_HOME}/GFESuite/ServiceBackup/configuration/svcbu.env
source ${AWIPS_HOME}/GFESuite/ServiceBackup/scripts/serviceBackupUtil.sh

SITE=`echo ${1} | tr '[A-Z]' '[a-z]'`
CAPS_SITE=`echo ${1} | tr [a-z] [A-Z]`
export SITE

configureLogging "svcbu_export_config" ${SITE}

lock_file=$(getLockFile "exportConfig" ${SITE})
lock_status=$(isOperationInProgress "exportConfig" ${SITE})
if [[ "${lock_status}" = "true" ]]
then
....echo "Cannot export configuration for ${CAPS_SITE}.  Export configuration process already in progress!"
....exit 1
fi

markTaskInProgress ${lock_file}

OUTPUT_DIR=$(getTempDirectory "export_configuration" ${CAPS_SITE})

echo "Clearing contents of ${OUTPUT_DIR}"
rm -rf ${OUTPUT_DIR}/*

echo "Preparing configuration files for export..."

edexDest=${OUTPUT_DIR}/GFEconfig/edex_static
commonDest=${OUTPUT_DIR}/GFEconfig/common_static
caveDest=${OUTPUT_DIR}/GFEconfig/cave_static 
rsyncParmsDest=${OUTPUT_DIR}/GFEconfig/site    # DR 16464/17443

echo "Making temporary edex configuration directories..."
mkdir -p $edexDest/site

echo "Making temporary common configuration directories..."
mkdir -p $commonDest/site

echo "Making temporary cave configuration directories"
mkdir -p $caveDest/site

# DR 16464
echo "Making temporary rsync_parms directory"
mkdir -p $rsyncParmsDest

CP_COMMAND="rsync -aq --exclude=*.pyo --exclude=*.pyc --exclude=__pycache__ --exclude=*.md5"

# Copies the localization information to the staging area
echo "Copying common site configuration for site ${CAPS_SITE} to temporary directory..."
${CP_COMMAND} ${LOCALIZATION_PATH}/common_static/site/${CAPS_SITE}/gfe $commonDest/site
${CP_COMMAND} ${LOCALIZATION_PATH}/common_static/site/${CAPS_SITE}/vtec $commonDest/site
${CP_COMMAND} ${LOCALIZATION_PATH}/common_static/site/${AW_SITE_IDENTIFIER}/mixedCase $commonDest/site

# append GFESUITE_MHSID to siteConfig.py in $commonDest/site
config=$commonDest/site/config/siteConfig.py
mhsid=`echo ${SITE_IDENTIFIER} | tr "[a-z]" "[A-Z]"`
mhsidline="GFESUITE_MHSID = '$mhsid'"
sed -i "$ a \\${mhsidline}" ${config}

# For backwards compatibility purposes for releases prior to 17.1.1 we need to keep the 
# files that were in edex_static in edex_static.
echo "Copying edex site configuration for site ${CAPS_SITE} to temporary directory..."
mkdir -p ${edexDest}/site/gfe
${CP_COMMAND} ${LOCALIZATION_PATH}/common_static/site/${CAPS_SITE}/gfe/config/* $edexDest/site/gfe

# append GFESUITE_MHSID to siteConfig.py in ${edexDest}/site/gfe
config=$edexDest/site/gfe/siteConfig.py
sed -i "$ a \\${mhsidline}" ${config}

echo "Copying edex smartinit for site ${CAPS_SITE} to temporary directory..."
${CP_COMMAND} ${LOCALIZATION_PATH}/common_static/site/${CAPS_SITE}/gfe/smartinit $edexDest/site

echo "Copying cave site configuration for site ${CAPS_SITE} to temporary directory..."
${CP_COMMAND} ${LOCALIZATION_PATH}/cave_static/site/${CAPS_SITE}/gfe $caveDest/site

# For backwards compatibility with pre-18.2.1 builds, 
# move text utilities from consolidated location to original text utility
# location
mkdir -p ${caveDest}/site/gfe/userPython/textUtilities/regular
for f in ${caveDest}/site/gfe/userPython/textUtilities/*.py ; do
    file_name=$(basename "${f}")
    mv "${f}" "${caveDest}/site/gfe/userPython/textUtilities/regular/${file_name}"
done

# For backwards compatibility purposes for releases prior to 18.1.1 we need to save the
# DefaultAreaDictionary.py and DefaultCityLocation.py files
if [[ -f $caveDest/site/gfe/userPython/textUtilities/regular/AreaDictionary.py ]]
then 
    cp --preserve ${LOCALIZATION_PATH}/cave_static/configured/${CAPS_SITE}/gfe/userPython/textUtilities/DefaultAreaDictionary.py $caveDest/site/gfe/userPython/textUtilities/regular
fi
if [[ -f $caveDest/site/gfe/userPython/textUtilities/regular/CityLocation.py ]]
then
    cp --preserve ${LOCALIZATION_PATH}/cave_static/configured/${CAPS_SITE}/gfe/userPython/textUtilities/DefaultCityLocation.py $caveDest/site/gfe/userPython/textUtilities/regular
fi

echo "Copying cave site maps configuration for site ${CAPS_SITE} to temporary directory..."
mkdir $caveDest/site/bundles
${CP_COMMAND} ${LOCALIZATION_PATH}/cave_static/site/${CAPS_SITE}/bundles/maps $caveDest/site/bundles

echo "Copying cave site colormaps configuration for site ${CAPS_SITE} to temporary directory..."
${CP_COMMAND} ${LOCALIZATION_PATH}/common_static/site/${CAPS_SITE}/colormaps $commonDest/site

# DR 16464, 17443: CAPS_SITE->SITE (lower case)
if [ -f ${IFPS_DATA}/rsync_parms.${SITE} ]; then
    echo "Copying the rsync_parms file for site ${SITE} to temporary directory..."
    cp -a ${IFPS_DATA}/rsync_parms.${SITE} $rsyncParmsDest
fi

# Determine if we're exporting for this site or for its subdomains
SUBDOMAIN_STR=$(eval "echo \${SUBDOMAINS_$CAPS_SITE}")
if [ -z "${SUBDOMAIN_STR}" ]
then
    declare -a EXPORT_SITES=( "${CAPS_SITE}" )
else
    IFS=',' read -ra EXPORT_SITES <<< "${SUBDOMAIN_STR}"
    echo "Found sub-domains ${EXPORT_SITES[@]} for ${CAPS_SITE}" 
fi

for siteid in "${EXPORT_SITES[@]}"
do
    siteid_lc=`echo ${siteid} | tr '[A-Z]' '[a-z]'`
    siteid_caps=`echo ${siteid} | tr [a-z] [A-Z]`
    
    echo "Preparing site ${siteid_caps}'s compressed file for exporting to central server..."
    
    site_dir=${OUTPUT_DIR}
    if [ "${siteid_caps}" != "${CAPS_SITE}" ]
    then
        site_dir=$(getTempDirectory "export_configuration" ${siteid_caps})
        rm -rf ${site_dir}/*
        cp -a ${OUTPUT_DIR}/GFEconfig ${site_dir}

        ## Re-localize configuration files from the super-domain to the 
        ## needed sub-domain

        # replace GFESUITE_SITEID setting in siteConfig.py
        config=${site_dir}/GFEconfig/edex_static/site/gfe/siteConfig.py
        ORIG_SITEID=$(egrep "^GFESUITE_SITEID" ${config})
        NEW_SITEID="GFESUITE_SITEID = '${siteid_caps}'"
        sed -i "s/$ORIG_SITEID/$NEW_SITEID/" ${config}
        
        # rename rsync_parms to use sub-domain site ID
        if [ -f ${site_dir}/GFEconfig/site/rsync_parms.${SITE} ]
        then
            mv ${site_dir}/GFEconfig/site/rsync_parms.${SITE} ${site_dir}/GFEconfig/site/rsync_parms.${siteid_lc}
        fi
    fi
    
    echo "Changing to output directory: ${site_dir}"
    cd ${site_dir}
    
    # Tar up everything.
    echo "Tarring and zipping configuration to file GFEconfig.${siteid_lc}.tar.gz"
    tar -c GFEconfig | gzip -9 > GFEconfig.${siteid_lc}.tar.gz
    if [ $? -ne 0 ]
    then
        echo "Failed to make GFEconfig.${siteid_lc}.tar.gz. Program exits now."
        markTaskFailed ${lock_file}
        exit 1
    fi
    
    # Cleanup
    echo "Cleaning up temporary files"
    rm -rf ${site_dir}/GFEconfig

    echo "Writing site ID to text file..."
    echo ${siteid_lc} > siteID.txt
    
    echo "Compressing to file svc_bkup_${siteid_lc}.tar"
    tar -cf svc_bkup_${siteid_lc}.tar GFEconfig.${siteid_lc}.tar.gz siteID.txt
    # check for failure of the tar file
    if [ $? -ne 0 ]
    then
        echo "Failed to make the tar file. Program exits."
        markTaskFailed ${lock_file}
        exit 1
    fi
    
    # Cleanup zip files
    echo "Cleaning up zip files"
    rm -f ${site_dir}/*.gz
    rm -f ${site_dir}/siteID.txt

    echo "Sending the tar file to the central server..."

....# Check to see if ${SVCBU_WMO_HEADER} is assigned a value. If so, call msg_send with -i.
    # Otherwise, don't call it with -i
    if [ -n "${SVCBU_WMO_HEADER}" ]; then
        MSG_SEND_FLAGS="-e ${site_dir}/svc_bkup_${siteid_lc}.tar -a ${SVCBU_ADDRESSEE} -i ${SVCBU_WMO_HEADER} -s ${siteid_lc}3 -c 20"
    else
        MSG_SEND_FLAGS="-e ${site_dir}/svc_bkup_${siteid_lc}.tar -a ${SVCBU_ADDRESSEE} -s ${siteid_lc}3 -c 20"
    fi
    
    echo "MSG_SEND COMMAND: $MSG_SEND_COMMAND $MSG_SEND_FLAGS"
    msgSendOutput=$($MSG_SEND_COMMAND $MSG_SEND_FLAGS)
    exitValue=$?
    if [ $exitValue -ne 0 ]
    then
        echo "msg_send FAILED with exit value $exitValue and the following error: $msgSendOutput"
        markTaskFailed ${lock_file}
        exit 1
    else
        echo "Successfully sent message. MESSAGE ID: $msgSendOutput"
    fi
done

echo "Cleaning up temporary files for main domain"
rm -rf ${OUTPUT_DIR}/*

echo "Configuration data has been exported!"
markTaskSuccess ${lock_file}
exit 0
