#!/bin/bash

##
# This software was developed and / or modified by Raytheon Company,
# pursuant to Contract DG133W-05-CQ-1067 with the US Government.
# 
# U.S. EXPORT CONTROLLED TECHNICAL DATA
# This software product contains export-restricted data whose
# export/transfer/disclosure is restricted by U.S. law. Dissemination
# to non-U.S. persons whether in the United States or abroad requires
# an export license or other authorization.
# 
# Contractor Name:        Raytheon Company
# Contractor Address:     6825 Pine Street, Suite 340
#                         Mail Stop B8
#                         Omaha, NE 68106
#                         402.291.0100
# 
# See the AWIPS II Master Rights File ("Master Rights File.pdf") for
# further licensing information.
#
##

##
#
# SOFTWARE HISTORY
# Date         Ticket#    Engineer    Description
# ------------ ---------- ----------- --------------------------
# Feb 09, 2015  #4103     dgilling    Cleans up lock files, refactored to
#                                     support multiple svcbu sites.
# Jul 15, 2016  #5747     dgilling    Move edex_static to common_static.
# Jan 07, 2019  #7704     randerso    Fix removal of backup rsync grids.
# Apr 30, 2019  #7806     kbisanz     Do not remove files needed by Hazard
#                                     Services.
#
##


if [ ${#AWIPS_HOME} = 0 ]
then
        path_to_script=`readlink -f $0`
		export AWIPS_HOME=$(dirname $(dirname $(dirname $(dirname  $path_to_script))))
fi

if [ $# -ne 1 ]
then
  echo "Incorrect number of arguments. Correct usage: cleanup_svcbk failed_site"
  exit 1
fi

# $1 = Failed site
CAPS_FAILED_SITE=`echo ${1} | tr [a-z] [A-Z]`
LC_FAILED_SITE=`echo ${1} | tr [A-Z] [a-z]`

. ${AWIPS_HOME}/GFESuite/ServiceBackup/configuration/svcbu.env
source ${AWIPS_HOME}/GFESuite/ServiceBackup/scripts/serviceBackupUtil.sh

configureLogging "svcbu_cleanup_svcbk" ${CAPS_FAILED_SITE}

#
#-- Remove the locks directory
#
LOCK_DIR=$(getLockFile "" ${CAPS_FAILED_SITE})
if [ -d ${LOCK_DIR} ];then
  echo "Removing the contents of ${LOCK_DIR}"
  rm -rf ${LOCK_DIR}
fi

#
#-- If the site's temporary working directory exists, delete the contents of it
#
SCRATCH_AREA=$(getTempDirectory "" ${CAPS_FAILED_SITE})
if [ -d ${SCRATCH_AREA} ];then
  echo "Removing the contents of ${SCRATCH_AREA}"
  rm -rf ${SCRATCH_AREA}
fi

# DR 16362
if [ -d ${LOCALIZATION_PATH}/common_static/site/${CAPS_FAILED_SITE}/gfe ]; then
    echo "Removing common site configuration for site ${CAPS_FAILED_SITE}"
    rm -fr ${LOCALIZATION_PATH}/common_static/site/${CAPS_FAILED_SITE}/gfe
fi

if [ -d ${LOCALIZATION_PATH}/common_static/site/${CAPS_FAILED_SITE}/vtec ]; then
    echo "Removing common site vtec configuration for site ${CAPS_FAILED_SITE}"
    rm -fr ${LOCALIZATION_PATH}/common_static/site/${CAPS_FAILED_SITE}/vtec
fi

if [ -d ${LOCALIZATION_PATH}/common_static/site/${CAPS_FAILED_SITE}/gfe/config ]; then
    echo "Removing edex site configuration for site ${CAPS_FAILED_SITE}"
    rm -fr ${LOCALIZATION_PATH}/common_static/site/${CAPS_FAILED_SITE}/gfe/config
fi

if [ -d ${LOCALIZATION_PATH}/common_static/site/${CAPS_FAILED_SITE}/gfe/smartinit ]; then
    echo "Removing edex smartinit for site ${CAPS_FAILED_SITE}"
    rm -fr ${LOCALIZATION_PATH}/common_static/site/${CAPS_FAILED_SITE}/gfe/smartinit
fi

if [ -d ${LOCALIZATION_PATH}/cave_static/site/${CAPS_FAILED_SITE}/gfe ]; then
    echo "Removing cave site configuration for site ${CAPS_FAILED_SITE}"
    # Remove all files, except for those needed by Hazard Services
    FAILED_CAVE_SITE_GFE=${LOCALIZATION_PATH}/cave_static/site/${CAPS_FAILED_SITE}/gfe
    find ${FAILED_CAVE_SITE_GFE} \
       -type f \
       ! -path ${FAILED_CAVE_SITE_GFE}/userPython/textUtilities/DefaultAreaDictionary.py \
       ! -path ${FAILED_CAVE_SITE_GFE}/userPython/textUtilities/DefaultCityLocation.py \
       ! -path ${FAILED_CAVE_SITE_GFE}/userPython/textUtilities/AreaDictionary.py \
       ! -path ${FAILED_CAVE_SITE_GFE}/userPython/textUtilities/CityLocation.py \
       -delete
    # Remove empty directories
    find ${FAILED_CAVE_SITE_GFE} -type d -empty -delete
fi

if [ -d ${LOCALIZATION_PATH}/cave_static/site/${CAPS_FAILED_SITE}/bundles/maps ]; then
    echo "Removing cave site maps configuration for site ${CAPS_FAILED_SITE}"
    rm -fr ${LOCALIZATION_PATH}/cave_static/site/${CAPS_FAILED_SITE}/bundles/maps
fi

if [ -d ${LOCALIZATION_PATH}/cave_static/site/${CAPS_FAILED_SITE}/colormaps ]; then
    echo "Removing cave site colormaps configuration for site ${CAPS_FAILED_SITE}"
    rm -fr ${LOCALIZATION_PATH}/common_static/site/${CAPS_FAILED_SITE}/colormaps
fi

# end DR 16362

# DR 16464
if [ -d /awips2/GFESuite/ServiceBackup/data/${CAPS_FAILED_SITE} ]; then
    echo "Removing rsync_parms.site for site ${CAPS_FAILED_SITE}"
    rm -f /awips2/GFESuite/ServiceBackup/data/rsync_parms.${CAPS_FAILED_SITE}
fi
# end DR 16464

#-- Remove the rsync grids
NETCDF_PATH=${GFESUITE_HOME}/exportgrids/backup
if [ -f ${NETCDF_PATH}/${LC_FAILED_SITE}Grd.netcdf ]
then
   mv ${NETCDF_PATH}/${LC_FAILED_SITE}Grd.netcdf ${NETCDF_PATH}/${LC_FAILED_SITE}Grd.netcdf.rm
   rm -f ${NETCDF_PATH}/${LC_FAILED_SITE}Grd.netcdf.rm
fi
