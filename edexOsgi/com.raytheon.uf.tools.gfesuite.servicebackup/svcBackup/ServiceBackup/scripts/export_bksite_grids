#!/bin/bash

##
# This software was developed and / or modified by Raytheon Company,
# pursuant to Contract DG133W-05-CQ-1067 with the US Government.
# 
# U.S. EXPORT CONTROLLED TECHNICAL DATA
# This software product contains export-restricted data whose
# export/transfer/disclosure is restricted by U.S. law. Dissemination
# to non-U.S. persons whether in the United States or abroad requires
# an export license or other authorization.
# 
# Contractor Name:        Raytheon Company
# Contractor Address:     6825 Pine Street, Suite 340
#                         Mail Stop B8
#                         Omaha, NE 68106
#                         402.291.0100
# 
# See the AWIPS II Master Rights File ("Master Rights File.pdf") for
# further licensing information.
#
##

##
#
# SOFTWARE HISTORY
# Date         Ticket#    Engineer    Description
# ------------ ---------- ----------- --------------------------
# Feb 09, 2015  #4103     dgilling    Refactored to support multiple svcbu 
#                                     sites.
#
##


if [ ${#AWIPS_HOME} = 0 ]
then
        path_to_script=`readlink -f $0`
		export AWIPS_HOME=$(dirname $(dirname $(dirname $(dirname  $path_to_script))))
fi


# $1 = Failed Site Name

if [ $# -ne 1 ]
then
   echo "Incorrect number of arguments\nCorrect usage: export_bksite_grids failed_wfo"
   exit 1
fi

. ${AWIPS_HOME}/GFESuite/ServiceBackup/configuration/svcbu.env
source ${AWIPS_HOME}/GFESuite/ServiceBackup/scripts/serviceBackupUtil.sh

FAILED_SITE=`echo ${1} | tr '[A-Z]' '[a-z]'`
FAILED_CAPS_SITE=`echo ${1} | tr [a-z] [A-Z]`

# Create the log file
configureLogging "svcbu_export_bksite_grids_central_server" ${FAILED_SITE}

# Check the status of the lock file to see if we are OK to proceed.
lock_file=$(getLockFile "exportBksiteGridsCS" ${FAILED_SITE})
lock_status=$(isOperationInProgress "exportBksiteGridsCS" ${FAILED_SITE})
if [[ "${lock_status}" = "true" ]]
then
	echo "Cannot export grids for ${FAILED_CAPS_SITE}.  Export grids process already in progress!"
	exit 1
fi

echo "IN_PROGRESS" > ${lock_file}

#
# If this is a non-wfo/non-rfc site, they may not have an edit area for clipping - handle it
#
if [ "$SVCBU_GRIDAREA" == "" ] ; then
   SVCBU_MASK=""
else
   SVCBU_MASK="-m $SVCBU_GRIDAREA"
fi

echo "Exporting $FAILED_CAPS_SITE grids to central server"

OUTPUT_DIR=$(getTempDirectory "export_bksite_grids" ${FAILED_SITE})

#Starting ifpnetCDF to pack the grids
echo "Running ifpnetCDF...(May take awhile)" 
echo "${GFESUITE_BIN}/ifpnetCDF -o ${OUTPUT_DIR}/${FAILED_SITE}Grd.netcdf -h $SVCBU_HOST -r $CDSPORT -d ${FAILED_CAPS_SITE}_GRID__Official_00000000_0000 -k -t -c ${SVCBU_MASK}"
${GFESUITE_BIN}/ifpnetCDF -o ${OUTPUT_DIR}/${FAILED_SITE}Grd.netcdf -h $SVCBU_HOST -r $CDSPORT -d ${FAILED_CAPS_SITE}_GRID__Official_00000000_0000 -k -t -c ${SVCBU_MASK}
if [ $? -ne 0 ]; then
    echo "ifpnetCDF process failed to create grids to send to the central server. Exiting..."
    echo "ERROR: ifpnetCDF failed..."
    echo "FAILED" > ${lock_file}
    rm -f ${OUTPUT_DIR}/${FAILED_SITE}Grd.netcdf*
    exit 1
fi
# Store the site-id in siteID.txt file to get tarred.
echo $FAILED_SITE > ${OUTPUT_DIR}/siteID.txt

# Switch to log directory to tarup the file.
cd ${OUTPUT_DIR}

#tar the netcdf file again to preserve the file name so that when importing
#we can retrieve the site id from the file name
tar cvf ${FAILED_SITE}Grd.netcdf.tar ${FAILED_SITE}Grd.netcdf.gz siteID.txt


echo "Preparing package for msg_send..."
#form the subject line for msg_send which uses it as the file name in the central server
#h_mach=`hostname|cut -d- -f2`
subj=${FAILED_SITE}Grd
echo "The subject line of msg_send is $subj"
#
#calling msg_send to send the data to the central server
echo "Sending the gridded data to the central server..." 
# We need to add another -c command in message handling system.
# Send the grids to the central server 
# If we find a valid WMO Header, then add -i argument to msg_send call.
# Otherwise, don't add it.
if [ -n "${SVCBU_WMO_HEADER}" ]; then
    msgSendOutput=$($MSG_SEND_COMMAND -e ${OUTPUT_DIR}/${FAILED_SITE}Grd.netcdf.tar -a ${SVCBU_ADDRESSEE} -i ${SVCBU_WMO_HEADER} -s $subj -c 20)
    exitValue=$?
    if [ $exitValue -ne 0 ]
    then
        echo "msg_send has failed to send ${OUTPUT_DIR}/${FAILED_SITE}Grd.netcdf.tar"
        echo "msg_send FAILED with exit value $exitValue and the following error: $msgSendOutput"
        echo "FAILED" > ${lock_file}
        rm -f ${OUTPUT_DIR}/${FAILED_SITE}Grd.netcdf*
        exit 1
    fi
else
    msgSendOutput=$($MSG_SEND_COMMAND -e ${OUTPUT_DIR}/${FAILED_SITE}Grd.netcdf.tar -a ${SVCBU_ADDRESSEE} -s $subj -c 20)
    exitValue=$?
    if [ $exitValue -ne 0 ]
    then
        echo "msg_send has failed to send ${OUTPUT_DIR}/${FAILED_SITE}Grd.netcdf.tar"
        echo "msg_send FAILED with exit value $exitValue and the following error: $msgSendOutput"
        echo "FAILED" > ${lock_file}
        rm -f ${OUTPUT_DIR}/${FAILED_SITE}Grd.netcdf*
        exit 1
    fi
fi
echo "Successfully sent message. MESSAGE ID: $msgSendOutput"
echo "SUCCESS" > ${lock_file}
#delete the temporary netCDF file as well.
rm -f ${OUTPUT_DIR}/${FAILED_SITE}Grd.netcdf.*
echo "All done. Export Gridded data has completed" 
exit 0