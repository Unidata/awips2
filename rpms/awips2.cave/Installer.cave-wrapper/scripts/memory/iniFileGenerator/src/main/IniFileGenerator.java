/**
 * This software was developed and / or modified by Raytheon Company,
 * pursuant to Contract DG133W-05-CQ-1067 with the US Government.
 *
 * U.S. EXPORT CONTROLLED TECHNICAL DATA
 * This software product contains export-restricted data whose
 * export/transfer/disclosure is restricted by U.S. law. Dissemination
 * to non-U.S. persons whether in the United States or abroad requires
 * an export license or other authorization.
 *
 * Contractor Name:        Raytheon Company
 * Contractor Address:     6825 Pine Street, Suite 340
 *                         Mail Stop B8
 *                         Omaha, NE 68106
 *                         402.291.0100
 *
 * See the AWIPS II Master Rights File ("Master Rights File.pdf") for
 * further licensing information.
 **/
package main;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;

/**
 * Generates component-specific and wfo-specific ini files for CAVE based on the
 * ini file generated by the Eclipse PDE build and the contents of
 * memorySettings.xml. Compiled and used by the awips2-cave-wrapper RPM build.
 *
 * <pre>
 *
 * SOFTWARE HISTORY
 *
 * Date         Ticket#    Engineer    Description
 * ------------ ---------- ----------- --------------------------
 * Sep 22, 2015 4826       bkowal      Initial creation
 * Jul 12, 2017 6351       nabowle     Case-insensitive matching.
 *
 * </pre>
 *
 * @author bkowal
 */

public class IniFileGenerator {

    private final JAXBContext jaxbContext;

    private static final String INI_EXT = ".ini";

    private static final String CAVE_INI_ENTRY = "cave/cave" + INI_EXT;

    private final Path zipPath;

    private final Path memorySettingsPath;

    private final Path iniPath;

    protected IniFileGenerator(final String zipPath,
            final String memorySettings, final String iniDestination)
            throws Exception {
        this.zipPath = Paths.get(zipPath);
        this.memorySettingsPath = Paths.get(memorySettings);
        this.iniPath = Paths.get(iniDestination);

        this.jaxbContext = JAXBContext.newInstance(CAVEMemorySettings.class);
    }

    protected void generate() throws Exception {
        CAVEMemorySettings caveMemorySettings = null;
        try (InputStream is = Files.newInputStream(memorySettingsPath)) {
            caveMemorySettings = (CAVEMemorySettings) this.jaxbContext
                    .createUnmarshaller().unmarshal(is);
        }

        StringBuilder iniContents = new StringBuilder();
        try (ZipFile zipFile = new ZipFile(zipPath.toFile(),
                ZipFile.OPEN_READ)) {
            ZipEntry caveIniEntry = zipFile.getEntry(CAVE_INI_ENTRY);
            try (InputStream is = zipFile.getInputStream(caveIniEntry);
                    InputStreamReader isr = new InputStreamReader(is);
                    BufferedReader br = new BufferedReader(isr)) {
                String line;
                while ((line = br.readLine()) != null) {
                    if (iniContents.length() > 0) {
                        iniContents.append("\n");
                    }
                    iniContents.append(line);
                }
            }
        }

        final String defaultMaxMemory = caveMemorySettings
                .getDefaultMemorySetting().getDefaultMaxMemory().getJvmArg()
                + caveMemorySettings.getDefaultMemorySetting()
                        .getDefaultMaxMemory().getValue();

        try (BufferedWriter bw = Files.newBufferedWriter(
                this.iniPath.resolve("iniLookup.sh"), Charset.defaultCharset())) {
            this.startIniLookup(bw);
            for (MemorySetting memorySetting : caveMemorySettings
                    .getMemorySettings()) {

                String maxMemory = caveMemorySettings.getDefaultMemorySetting()
                        .getDefaultMaxMemory().getJvmArg()
                        + memorySetting.getIniSubsitution().getMaxMemory()
                                .getValue();
                if ("DEFAULT".equals(memorySetting.getIniSubsitution()
                        .getMaxMemory().getValue())) {
                    maxMemory = defaultMaxMemory;
                }

                this.writeIniLookupEntry(bw,
                        memorySetting.getCommandLineArgs().getFirstArg(),
                        memorySetting.getCommandLineArgs().getSecondArg());

                final Path iniPath = this.iniPath.resolve(memorySetting
                        .getCommandLineArgs().getSecondArg() + INI_EXT);
                try (BufferedWriter iniBw = Files.newBufferedWriter(iniPath,
                        Charset.defaultCharset())) {
                    iniBw.write(iniContents.toString()
                            .replace(defaultMaxMemory, maxMemory));
                }
            }
            this.finishIniLookup(bw);
        }

        for (SiteTypeOverride siteTypeOverride : caveMemorySettings
                .getSiteTypeOverrides()) {

            String maxMemory = caveMemorySettings.getDefaultMemorySetting()
                    .getDefaultMaxMemory().getJvmArg()
                    + siteTypeOverride.getIniSubsitution().getMaxMemory()
                            .getValue();
            if ("DEFAULT".equals(siteTypeOverride.getIniSubsitution()
                    .getMaxMemory().getValue())) {
                maxMemory = defaultMaxMemory;
            }

            final Path iniPath = this.iniPath
                    .resolve(siteTypeOverride.getSiteType() + INI_EXT);
            try (BufferedWriter iniBw = Files.newBufferedWriter(iniPath,
                    Charset.defaultCharset())) {
                iniBw.write(iniContents.toString().replace(defaultMaxMemory, maxMemory));
            }
        }
    }

    private void startIniLookup(BufferedWriter bw) throws Exception {
        this.writeIniLookupLine(bw, "#!/bin/bash");
        this.writeIniLookupLine(bw, "");
        this.writeIniLookupLine(bw,
                "# This auto-generated script will be sourced by caveUtil.sh.");
        this.writeIniLookupLine(bw, "export ASSOCIATED_INI=");
        this.writeIniLookupLine(bw, "");
        this.writeIniLookupLine(bw, "function retrieveAssociatedINI()");
        this.writeIniLookupLine(bw, "{");
        this.writeIniLookupLine(bw, "# Arguments", 1);
        this.writeIniLookupLine(bw, "# Arguments", 1);
        this.writeIniLookupLine(bw,
                "#   ${1} == one in the set: {-component, -perspective}", 1);
        this.writeIniLookupLine(bw,
                "#   ${2} == the argument that corresponds to the first argument",
                1);
        this.writeIniLookupLine(bw, "");
        this.writeIniLookupLine(bw, "# AUTOGENERATED IF STATEMENTS.", 1);
        this.writeIniLookupLine(bw, "");
        // set nocasematch option, which enables case-insensitive matching for case and [[ ]] expressions
        this.writeIniLookupLine(bw, "shopt -s nocasematch", 1);
    }

    private void writeIniLookupEntry(BufferedWriter bw, final String arg1,
            final String arg2) throws Exception {
        StringBuilder sb = new StringBuilder("if [ \"${1}\" = \"");
        sb.append(arg1);
        sb.append("\" ] && [[ \"${2}\" = \"");
        sb.append(arg2);
        sb.append("\" ]]; then");
        this.writeIniLookupLine(bw, sb.toString(), 1);

        sb = new StringBuilder("export ASSOCIATED_INI=\"");
        sb.append(arg2).append(INI_EXT).append("\"");
        this.writeIniLookupLine(bw, sb.toString(), 2);
        // unset nocasematch to avoid unintended matches elsewhere
        this.writeIniLookupLine(bw, "shopt -u nocasematch", 2);
        this.writeIniLookupLine(bw, "return 0", 2);
        this.writeIniLookupLine(bw, "fi", 1);
        this.writeIniLookupLine(bw, "");
    }

    private void finishIniLookup(BufferedWriter bw) throws Exception {
        // unset nocasematch to avoid unintended matches elsewhere
        this.writeIniLookupLine(bw, "shopt -u nocasematch", 1);
        this.writeIniLookupLine(bw, "return 1", 1);
        this.writeIniLookupLine(bw, "}");
    }

    private void writeIniLookupLine(BufferedWriter bw, final String text)
            throws Exception {
        this.writeIniLookupLine(bw, text, 0);
    }

    private void writeIniLookupLine(BufferedWriter bw, final String text,
            final int leadingTabs) throws Exception {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < leadingTabs; i++) {
            sb.append("    ");
        }
        sb.append(text);
        sb.append("\n");

        bw.write(sb.toString());
    }

    public static void main(String[] args) {
        if (args.length != 3) {
            System.out.println("Error: Invalid Arguments Specified.");
            System.exit(1);
        }

        try {
            new IniFileGenerator(args[0], args[1], args[2]).generate();
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(1);
        }

        System.exit(0);
    }

    /*
     * Memory Settings JAXB POJO.
     */
    @SuppressWarnings("unused")
    @XmlRootElement(name = "cave-memory-settings")
    @XmlAccessorType(XmlAccessType.NONE)
    private static class CAVEMemorySettings {

        @XmlElement(name = "file-version")
        private String fileVersion;

        @XmlElement(name = "default-memory-setting")
        private DefaultMemorySetting defaultMemorySetting;

        @XmlElement(name = "memory-setting")
        private List<MemorySetting> memorySettings;

        @XmlElement(name = "site-type-override")
        private List<SiteTypeOverride> siteTypeOverrides;

        private CAVEMemorySettings() {
        }

        public String getFileVersion() {
            return fileVersion;
        }

        public void setFileVersion(String fileVersion) {
            this.fileVersion = fileVersion;
        }

        public DefaultMemorySetting getDefaultMemorySetting() {
            return defaultMemorySetting;
        }

        public void setDefaultMemorySetting(
                DefaultMemorySetting defaultMemorySetting) {
            this.defaultMemorySetting = defaultMemorySetting;
        }

        public List<MemorySetting> getMemorySettings() {
            return memorySettings;
        }

        public void setMemorySettings(List<MemorySetting> memorySettings) {
            this.memorySettings = memorySettings;
        }

        public List<SiteTypeOverride> getSiteTypeOverrides() {
            return siteTypeOverrides;
        }

        public void setSiteTypeOverrides(
                List<SiteTypeOverride> siteTypeOverrides) {
            this.siteTypeOverrides = siteTypeOverrides;
        }
    }

    @SuppressWarnings("unused")
    @XmlAccessorType(XmlAccessType.NONE)
    private static class DefaultMemorySetting {

        @XmlElement(name = "default-max-memory")
        private DefaultJvmArgValuePair defaultMaxMemory;

        private DefaultMemorySetting() {
        }

        public DefaultJvmArgValuePair getDefaultMaxMemory() {
            return defaultMaxMemory;
        }

        public void setDefaultMaxMemory(DefaultJvmArgValuePair defaultMaxMemory) {
            this.defaultMaxMemory = defaultMaxMemory;
        }
    }

    @SuppressWarnings("unused")
    @XmlAccessorType(XmlAccessType.NONE)
    private static class DefaultJvmArgValuePair {

        @XmlElement(name = "jvm-arg")
        private String jvmArg;

        @XmlElement
        private String value;

        private DefaultJvmArgValuePair() {
        }

        public String getJvmArg() {
            return jvmArg;
        }

        public void setJvmArg(String jvmArg) {
            this.jvmArg = jvmArg;
        }

        public String getValue() {
            return value;
        }

        public void setValue(String value) {
            this.value = value;
        }
    }

    @SuppressWarnings("unused")
    @XmlAccessorType(XmlAccessType.NONE)
    private static class MemorySetting {

        @XmlElement(name = "command-line-args")
        private CommandLineArgs commandLineArgs;

        @XmlElement(name = "ini-substitutions")
        private IniSubsitution iniSubsitution;

        private MemorySetting() {
        }

        public CommandLineArgs getCommandLineArgs() {
            return commandLineArgs;
        }

        public void setCommandLineArgs(CommandLineArgs commandLineArgs) {
            this.commandLineArgs = commandLineArgs;
        }

        public IniSubsitution getIniSubsitution() {
            return iniSubsitution;
        }

        public void setIniSubsitution(IniSubsitution iniSubsitution) {
            this.iniSubsitution = iniSubsitution;
        }
    }

    @SuppressWarnings("unused")
    @XmlAccessorType(XmlAccessType.NONE)
    private static class SiteTypeOverride {

        @XmlElement(name = "site-type")
        private String siteType;

        @XmlElement(name = "ini-substitutions")
        private IniSubsitution iniSubsitution;

        private SiteTypeOverride() {
        }

        public String getSiteType() {
            return siteType;
        }

        public void setSiteType(String siteType) {
            this.siteType = siteType;
        }

        public IniSubsitution getIniSubsitution() {
            return iniSubsitution;
        }

        public void setIniSubsitution(IniSubsitution iniSubsitution) {
            this.iniSubsitution = iniSubsitution;
        }
    }

    @SuppressWarnings("unused")
    @XmlAccessorType(XmlAccessType.NONE)
    private static class CommandLineArgs {

        @XmlElement(name = "first-arg")
        private String firstArg;

        @XmlElement(name = "second-arg")
        private String secondArg;

        private CommandLineArgs() {
        }

        public String getFirstArg() {
            return firstArg;
        }

        public void setFirstArg(String firstArg) {
            this.firstArg = firstArg;
        }

        public String getSecondArg() {
            return secondArg;
        }

        public void setSecondArg(String secondArg) {
            this.secondArg = secondArg;
        }
    }

    @SuppressWarnings("unused")
    @XmlAccessorType(XmlAccessType.NONE)
    private static class IniSubsitution {

        @XmlElement(name = "max-memory")
        private SubstitutionValue maxMemory;

        private IniSubsitution() {
        }

        public SubstitutionValue getMaxMemory() {
            return maxMemory;
        }

        public void setMaxMemory(SubstitutionValue maxMemory) {
            this.maxMemory = maxMemory;
        }
    }

    @SuppressWarnings("unused")
    @XmlAccessorType(XmlAccessType.NONE)
    private static class SubstitutionValue {

        @XmlElement
        private String value;

        private SubstitutionValue() {
        }

        public String getValue() {
            return value;
        }

        public void setValue(String value) {
            this.value = value;
        }
    }
}
